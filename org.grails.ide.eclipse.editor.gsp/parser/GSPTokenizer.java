/* The following code was generated by JFlex 1.2.2 on 3/25/11 11:09 AM */

/*******************************************************************************
 * Copyright (c) 2004, 2011 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *     Frits Jalvingh - contributions for bug 150794
 *     Andrew Eisenberg - conversion for GSP files
 *******************************************************************************/
package org.grails.ide.eclipse.editor.gsp.parser;

import java.io.CharArrayReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.eclipse.jst.jsp.core.internal.Logger;
import org.eclipse.jst.jsp.core.internal.parser.internal.JSPParserRegionFactory;
import org.eclipse.jst.jsp.core.internal.regions.DOMJSPRegionContexts;
import org.eclipse.wst.sse.core.internal.ltk.parser.BlockMarker;
import org.eclipse.wst.sse.core.internal.ltk.parser.BlockTokenizer;
import org.eclipse.wst.sse.core.internal.ltk.parser.TagMarker;
import org.eclipse.wst.sse.core.internal.provisional.text.ITextRegion;
import org.eclipse.wst.sse.core.internal.provisional.text.ITextRegionList;
import org.eclipse.wst.sse.core.internal.util.Debug;
import org.eclipse.wst.sse.core.utils.StringUtils;
import org.eclipse.wst.xml.core.internal.parser.ContextRegionContainer;
import org.eclipse.wst.xml.core.internal.parser.IntStack;
	// This is the GRAILS GSP Parser, which has been borrowed from the 
	// JSP parser.  This file has been generated from GSPTokenizer.jflex
	// using the jflex parser generator.
	// Compare with JSPTokenizer.jflex.orig to see changes from the original
	// JSP tokenizer


/**
 * This class is a scanner generated by 
 * <a href="https://www.in.tum.de/~kleing/jflex/">JFlex</a> 1.2.2
 * on 3/25/11 11:09 AM from the specification file
 * <tt>file:/Users/andrew/Eclipse/Workspaces/workspaceAJDT36/org.grails.ide.eclipse.editor.gsp/parser/jflex-1.2.2/bin/../../GSPTokenizer.jflex</tt>
 */
public class GSPTokenizer implements BlockTokenizer, DOMJSPRegionContexts {

  /** this character denotes the end of file */
  final public static int YYEOF = -1;

  /** lexical states */
  final public static int ST_JSP_VBL_DQUOTES = 46;
  final public static int ST_JSP_VBL_SQUOTES = 45;
  final public static int ST_JSP_VBL_SQUOTES_END = 47;
  final public static int ST_XML_COMMENT_END = 4;
  final public static int ST_JSP_DIRECTIVE_ATTRIBUTE_VALUE = 21;
  final public static int ST_GSP_CONTENT = 22;
  final public static int ST_BLOCK_TAG_SCAN = 37;
  final public static int ST_DHTML_ATTRIBUTE_VALUE = 14;
  final public static int ST_XML_PI_ATTRIBUTE_NAME = 8;
  final public static int ST_DHTML_TAG_CLOSE = 15;
  final public static int ST_XML_ATTRIBUTE_VALUE_DQUOTED = 43;
  final public static int ST_DHTML_EQUALS = 13;
  final public static int ST_XML_PI_ATTRIBUTE_VALUE = 10;
  final public static int ST_XML_ATTRIBUTE_VALUE = 26;
  final public static int ST_JSP_VBL = 44;
  final public static int ST_JSP_SQUOTED_VBL = 50;
  final public static int ST_XML_ATTRIBUTE_VALUE_SQUOTED = 42;
  final public static int ST_XML_ATTRIBUTE_NAME = 24;
  final public static int ST_XML_EQUALS = 25;
  final public static int YYINITIAL = 0;
  final public static int ST_JSP_DIRECTIVE_ATTRIBUTE_NAME = 19;
  final public static int ST_JSP_CONTENT = 16;
  final public static int ST_XML_DOCTYPE_ID_SYSTEM = 32;
  final public static int ST_XML_ELEMENT_DECLARATION = 33;
  final public static int ST_XML_DECLARATION_CLOSE = 28;
  final public static int ST_JSP_DIRECTIVE_EQUALS = 20;
  final public static int ST_JSP_VBL_DQUOTES_END = 48;
  final public static int ST_XML_DOCTYPE_DECLARATION = 29;
  final public static int ST_CDATA_END = 2;
  final public static int ST_PI_WS = 6;
  final public static int ST_CDATA_TEXT = 1;
  final public static int ST_JSP_DIRECTIVE_NAME_WHITESPACE = 18;
  final public static int ST_XML_ELEMENT_DECLARATION_CONTENT = 34;
  final public static int ST_XML_ATTLIST_DECLARATION = 35;
  final public static int ST_JSP_COMMENT_END = 40;
  final public static int ST_XML_PI_EQUALS = 9;
  final public static int ST_XML_ATTLIST_DECLARATION_CONTENT = 36;
  final public static int ST_XML_DOCTYPE_ID_PUBLIC = 31;
  final public static int ST_JSP_DQUOTED_VBL = 49;
  final public static int ST_DHTML_ATTRIBUTE_NAME = 12;
  final public static int ST_ABORT_EMBEDDED = 38;
  final public static int ST_XML_DOCTYPE_EXTERNAL_ID = 30;
  final public static int ST_JSP_COMMENT = 39;
  final public static int ST_PI_CONTENT = 7;
  final public static int ST_BLOCK_TAG_INTERNAL_SCAN = 38;
  final public static int ST_PI = 5;
  final public static int ST_XML_DECLARATION = 27;
  final public static int ST_JSP_DIRECTIVE_NAME = 17;
  final public static int ST_XML_TAG_NAME = 23;
  final public static int ST_XML_PI_TAG_CLOSE = 11;
  final public static int ST_XML_COMMENT = 3;
  final public static int ST_JSP_ATTRIBUTE_VALUE = 41;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\5\1\27\2\0\1\20\22\0\1\20\1\26\1\12\1\66"+
    "\1\15\1\23\1\13\1\14\1\25\1\25\1\25\1\25\1\25\1\7"+
    "\1\6\1\3\12\21\1\11\1\73\1\1\1\52\1\2\1\4\1\22"+
    "\1\41\1\74\1\37\1\40\1\56\1\71\1\63\1\63\1\64\1\63"+
    "\1\63\1\34\1\32\1\65\1\53\1\55\1\63\1\70\1\67\1\42"+
    "\1\72\2\63\1\30\1\54\1\63\1\36\1\17\1\24\1\0\1\10"+
    "\1\0\1\60\1\105\1\75\1\61\1\44\1\71\1\76\1\106\1\47"+
    "\1\102\1\63\1\35\1\33\1\51\1\50\1\103\1\63\1\45\1\46"+
    "\1\57\1\104\1\43\1\63\1\31\1\62\1\63\1\16\1\0\1\101"+
    "\71\0\1\100\10\0\27\77\1\0\37\77\1\0\72\77\2\0\13\77"+
    "\2\0\10\77\1\0\65\77\1\0\104\77\11\0\44\77\3\0\2\77"+
    "\4\0\36\77\70\0\131\77\22\0\7\77\16\0\2\100\56\0\106\100"+
    "\32\0\2\100\44\0\1\77\1\100\3\77\1\0\1\77\1\0\24\77"+
    "\1\0\54\77\1\0\7\77\3\0\1\77\1\0\1\77\1\0\1\77"+
    "\1\0\1\77\1\0\22\77\15\0\14\77\1\0\102\77\1\0\14\77"+
    "\1\0\44\77\1\0\4\100\11\0\65\77\2\0\2\77\2\0\2\77"+
    "\3\0\34\77\2\0\10\77\2\0\2\77\67\0\46\77\2\0\1\77"+
    "\7\0\46\77\12\0\21\100\1\0\27\100\1\0\3\100\1\0\1\100"+
    "\1\0\2\100\1\0\1\100\13\0\33\77\5\0\3\77\56\0\32\77"+
    "\5\0\1\100\12\77\10\100\15\0\12\100\6\0\1\100\107\77\2\0"+
    "\5\77\1\0\17\77\1\0\4\77\1\0\1\77\17\100\2\77\2\100"+
    "\1\0\4\100\2\0\12\100\u0207\0\3\100\1\0\65\77\2\0\1\100"+
    "\1\77\20\100\3\0\4\100\3\0\12\77\2\100\2\0\12\100\21\0"+
    "\3\100\1\0\10\77\2\0\2\77\2\0\26\77\1\0\7\77\1\0"+
    "\1\77\3\0\4\77\2\0\1\100\1\0\7\100\2\0\2\100\2\0"+
    "\3\100\11\0\1\100\4\0\2\77\1\0\3\77\2\100\2\0\12\100"+
    "\2\77\20\0\1\100\2\0\6\77\4\0\2\77\2\0\26\77\1\0"+
    "\7\77\1\0\2\77\1\0\2\77\1\0\2\77\2\0\1\100\1\0"+
    "\5\100\4\0\2\100\2\0\3\100\13\0\4\77\1\0\1\77\7\0"+
    "\12\100\2\100\3\77\14\0\3\100\1\0\7\77\1\0\1\77\1\0"+
    "\3\77\1\0\26\77\1\0\7\77\1\0\2\77\1\0\5\77\2\0"+
    "\1\100\1\77\10\100\1\0\3\100\1\0\3\100\22\0\1\77\5\0"+
    "\12\100\21\0\3\100\1\0\10\77\2\0\2\77\2\0\26\77\1\0"+
    "\7\77\1\0\2\77\2\0\4\77\2\0\1\100\1\77\6\100\3\0"+
    "\2\100\2\0\3\100\10\0\2\100\4\0\2\77\1\0\3\77\4\0"+
    "\12\100\22\0\2\100\1\0\6\77\3\0\3\77\1\0\4\77\3\0"+
    "\2\77\1\0\1\77\1\0\2\77\3\0\2\77\3\0\3\77\3\0"+
    "\10\77\1\0\3\77\4\0\5\100\3\0\3\100\1\0\4\100\11\0"+
    "\1\100\17\0\11\100\21\0\3\100\1\0\10\77\1\0\3\77\1\0"+
    "\27\77\1\0\12\77\1\0\5\77\4\0\7\100\1\0\3\100\1\0"+
    "\4\100\7\0\2\100\11\0\2\77\4\0\12\100\22\0\2\100\1\0"+
    "\10\77\1\0\3\77\1\0\27\77\1\0\12\77\1\0\5\77\4\0"+
    "\7\100\1\0\3\100\1\0\4\100\7\0\2\100\7\0\1\77\1\0"+
    "\2\77\4\0\12\100\22\0\2\100\1\0\10\77\1\0\3\77\1\0"+
    "\27\77\1\0\20\77\4\0\6\100\2\0\3\100\1\0\4\100\11\0"+
    "\1\100\10\0\2\77\4\0\12\100\221\0\56\77\1\0\1\77\1\100"+
    "\2\77\7\100\5\0\6\77\1\100\10\100\1\0\12\100\47\0\2\77"+
    "\1\0\1\77\2\0\2\77\1\0\1\77\2\0\1\77\6\0\4\77"+
    "\1\0\7\77\1\0\3\77\1\0\1\77\1\0\1\77\2\0\2\77"+
    "\1\0\2\77\1\0\1\77\1\100\2\77\6\100\1\0\2\100\1\77"+
    "\2\0\5\77\1\0\1\100\1\0\6\100\2\0\12\100\76\0\2\100"+
    "\6\0\12\100\13\0\1\100\1\0\1\100\1\0\1\100\4\0\2\100"+
    "\10\77\1\0\41\77\7\0\24\100\1\0\6\100\4\0\6\100\1\0"+
    "\1\100\1\0\25\100\3\0\7\100\1\0\1\100\346\0\46\77\12\0"+
    "\47\77\11\0\1\77\1\0\2\77\1\0\3\77\1\0\1\77\1\0"+
    "\2\77\1\0\5\77\51\0\1\77\1\0\1\77\1\0\1\77\13\0"+
    "\1\77\1\0\1\77\1\0\1\77\3\0\2\77\3\0\1\77\5\0"+
    "\3\77\1\0\1\77\1\0\1\77\1\0\1\77\1\0\1\77\3\0"+
    "\2\77\3\0\2\77\1\0\1\77\50\0\1\77\11\0\1\77\2\0"+
    "\1\77\2\0\2\77\7\0\2\77\1\0\1\77\1\0\7\77\50\0"+
    "\1\77\4\0\1\77\10\0\1\77\u0c06\0\234\77\4\0\132\77\6\0"+
    "\26\77\2\0\6\77\2\0\46\77\2\0\6\77\2\0\10\77\1\0"+
    "\1\77\1\0\1\77\1\0\1\77\1\0\37\77\2\0\65\77\1\0"+
    "\7\77\1\0\1\77\3\0\3\77\1\0\7\77\3\0\4\77\2\0"+
    "\6\77\4\0\15\77\5\0\3\77\1\0\7\77\323\0\15\100\4\0"+
    "\1\100\104\0\1\77\3\0\2\77\2\0\1\77\121\0\3\77\u0e82\0"+
    "\1\100\1\0\1\77\31\0\11\77\6\100\1\0\5\100\13\0\124\77"+
    "\4\0\2\100\2\0\2\100\2\0\132\77\1\0\3\100\6\0\50\77"+
    "\u1cd3\0\u51a6\77\u0c5a\0\u2ba4\77\134\0\u0800\0\u1ffe\0\2\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    71,   142,   213,   284,   355,   426,   497,   568,   639, 
      710,   781,   852,   923,   994,  1065,  1136,  1207,  1278,  1349, 
     1420,  1491,  1562,  1633,  1704,  1775,  1846,  1917,  1988,  2059, 
     2130,  2201,  2272,  2343,  2414,  2485,  2556,  2627,  2698,  2769, 
     2840,  2911,  2982,  3053,  3124,  3195,  3266,  3337,  3408,  3479, 
     3550,  3621,  3692,  3763,  3834,  3905,  3976,  4047,  4118,  4189, 
     4260,  4118,  4189,  4260,  4331,  4118,  4118,  4189,  4260,  4402, 
     4473,  4544,  4615,  4686,  4757,  4828,  4899,  4118,  4189,  4970, 
     4260,  5041,  5112,  4118,  5183,  5183,  5254,  5325,  5396,  5467, 
     4970,  4118,  5538,  5609,  4118,  5680,  5751,  5822,  5893,  5964, 
     4118,  4189,  4260,  6035,  6106,  6177,  6248,  6319,  6390,  4118, 
     6461,  6461,  6532,  6603,  6674,  6745,  4118,  4189,  4260,  4118, 
     6816,  6887,  4118,  6958,  7029,  7100,  7171,  7242,  7313,  4118, 
     7384,  7455,  7526,  7597,  7668,  7739,  7810,  4118,  7881,  7952, 
     8023,  8094,  8165,  8236,  8307,  8378,  8378,  8449,  8520,  8591, 
     8662,  8733,  8733,  8804,  8875,  8946,  9017,  9088,  9088,  9159, 
     9230,  9301,  9372,  9443,  4118,  9514,  9585,  9585,  9656,  9727, 
     9798,  9869,  9940,  4118, 10011,  4118,  4189,  4260,  4118,  4189, 
     4260, 10082, 10153,  7455, 10224, 10295, 10366, 10437, 10508, 10579, 
    10650,  4118, 10721, 10792, 10863, 10934,  4118, 11005, 11076, 11147, 
     4118,  4118, 11218, 11289,  4118, 11360, 11431,  4118, 11502, 11360, 
    11573, 11644,  4118, 11715, 11573, 11786, 11857,  4118, 11928, 11999, 
     4118, 12070, 12141, 12212, 12283,  4118,  4118, 12354, 12425, 12496, 
    12567, 12638,  4118, 12709,  4118, 12780, 12851, 12922, 12993, 13064, 
    13135, 13206,  4118, 13277, 13348, 13419,  4118,  4118,  5183,  5325, 
     4118, 13490, 13561,  5396, 13632, 13703,  5183,  5538,  5680,  5751, 
    13774,  5822,  4118, 13845, 13916, 13987,  5893, 14058, 14129,  5680, 
     4118, 12425,  4118,  6461,  6532,  4118, 14200, 14271,  6603, 14342, 
    14413,  6461,  4118, 14484, 14555, 14626,  7384, 14697,  7597,  4118, 
    14768, 14839,  7668, 14910, 14981, 15052, 15123, 15194, 15265,  8094, 
     4118, 15336, 15407,  8378,  8449,  4118, 15478, 15549, 15620, 15691, 
    15762, 15833, 15904,  8378,  8662,  8378,  8733,  8804,  4118,  8875, 
     8733,  9017,  8733,  9088,  9159,  4118, 15975, 16046, 16117, 16188, 
    16259, 16330, 16401,  9088, 16472, 16543,  9372,  9585,  9656,  4118, 
    16614, 16685, 16756, 16827, 16898, 16969, 17040,  9585, 17111, 17182, 
     9869, 17253, 10153, 10295,  4118, 17324, 17395, 10366, 17466, 17537, 
    17608,  4118, 17679,  4118,  4118, 17750, 11076, 11076, 11360,  4118, 
    17821, 17892, 11360, 11573,  4118, 17963, 18034, 11573, 18105, 18176, 
    11786, 18247, 18318, 18389, 12070, 18460, 18531,  4118,  4118,  4118, 
    18602, 18673, 18744, 18815, 18886,  4118, 18957, 19028,  4118,  4118, 
     4118,  4118,  4615, 19099, 19170, 19241, 19312, 19383, 19454, 19525, 
    19596, 19667, 19738, 19809, 19880, 19951, 20022, 20093, 20164, 20235, 
    20164, 20306, 20377, 20448, 20519, 20590, 20661, 20732, 20803, 20803, 
    20874, 20945, 21016, 21087, 21087, 21158, 21229,  9372,  9372,  9372, 
    21300, 21371, 21442, 21513, 21513, 21584, 21655,  9869,  9869,  9869, 
    21726, 21797, 10295, 21868, 10366, 21939, 22010, 22010, 22081, 11076, 
    11076, 11076, 22152, 11360, 11360, 11360, 22223, 22294, 11573, 11573, 
    11573, 22365, 22436, 11786, 11786, 11786, 18247, 22507, 22578, 12070, 
    12070, 12070, 18460, 22649,  4118,  4118, 22720, 22791,  4118, 22862, 
    22933, 23004, 23075, 23146, 23217,  7384,  4118, 23288, 23359, 23430, 
    23501, 23572, 15762, 16259,  9372, 23643, 16898,  9869, 23714,  4118, 
    10153, 11076, 11360, 23785, 11573, 23856, 11786, 23927,  4118, 12070, 
    23998, 24069, 24140, 24211, 24282, 24353, 24424, 24495, 24566, 24637, 
    24708, 24779, 24850, 24921, 24992, 25063, 25134, 25205, 25276,  4615, 
    25347, 25418, 25489, 25560, 25631,  4118,  4118, 25702, 25773, 25844, 
    25915, 18247, 18460, 25986, 26057, 26128, 26199,  4118,  4118,  4118, 
    26270, 26341, 26412, 26483, 26554, 26625,  7100, 26696, 26767, 26838, 
    26909, 26980,  4118, 27051, 27122,  9372,  9869, 11360, 11573, 27193, 
    27264, 27335, 27406, 27477, 27548, 27619, 27690,  4615, 27761, 27832, 
    27903, 27974, 28045, 28116, 28187, 28258, 28329, 28400, 28471, 28542, 
    28613, 28684, 28755, 28826, 28897, 28968, 29039, 29110, 29181, 29252, 
    29323, 29394, 29465, 29536, 29607, 29678, 29749, 29820, 29891, 29962, 
    30033, 30104, 30175, 30246, 30317,  4118, 30388, 30459, 30530, 30601, 
     7100, 30672, 30743, 30814, 30885, 30956, 31027, 31098, 31169, 31240, 
    31311, 31382, 31453, 31524, 31595
  };

  /** 
   * The packed transition table of the DFA
   */
  final private static String yy_packed = 
    "\1\64\1\65\11\64\1\66\1\64\1\67\1\64\1\70"+
    "\3\64\1\71\42\64\1\72\20\64\1\73\1\74\13\73"+
    "\1\75\71\73\1\76\1\77\13\76\1\100\6\76\1\101"+
    "\2\76\1\102\57\76\1\103\1\104\13\103\1\105\71\103"+
    "\1\76\1\77\5\76\1\106\5\76\1\100\11\76\1\102"+
    "\60\76\1\77\2\76\1\107\1\110\2\76\2\111\3\76"+
    "\1\100\2\76\1\110\6\76\1\110\1\112\1\113\4\111"+
    "\1\76\10\111\1\114\2\111\1\76\11\111\1\114\1\111"+
    "\1\76\4\111\1\76\4\111\2\76\5\111\1\76\1\77"+
    "\2\76\1\107\1\115\7\76\1\100\2\76\1\115\6\76"+
    "\1\115\57\76\1\116\1\117\2\116\1\120\10\116\1\121"+
    "\11\116\1\102\57\116\1\76\1\77\2\76\1\122\1\110"+
    "\2\76\2\123\3\76\1\100\2\76\1\110\6\76\1\110"+
    "\6\123\1\76\13\123\1\76\13\123\1\76\4\123\1\76"+
    "\4\123\2\76\5\123\1\76\1\77\2\76\1\122\1\110"+
    "\2\76\2\123\3\76\1\100\2\76\1\110\6\76\1\110"+
    "\6\123\1\76\13\123\1\124\13\123\1\76\4\123\1\76"+
    "\4\123\2\76\5\123\1\125\1\77\1\76\1\126\1\127"+
    "\1\110\4\125\1\130\1\125\1\131\1\132\2\125\1\110"+
    "\6\125\1\110\57\125\1\76\1\77\2\76\1\133\10\76"+
    "\1\100\11\76\1\102\60\76\1\77\1\134\1\135\1\76"+
    "\1\110\2\76\2\136\3\76\1\100\2\76\1\110\6\76"+
    "\1\110\6\136\1\76\13\136\1\76\13\136\1\76\4\136"+
    "\1\76\4\136\2\76\5\136\1\76\1\77\1\134\1\135"+
    "\1\76\1\110\2\76\2\136\3\76\1\100\2\76\1\110"+
    "\6\76\1\110\6\136\1\76\13\136\1\137\13\136\1\76"+
    "\4\136\1\76\4\136\2\76\5\136\1\140\1\77\1\134"+
    "\1\141\1\140\1\110\4\140\1\142\1\140\1\143\1\144"+
    "\2\140\1\110\6\140\1\110\57\140\1\76\1\77\3\76"+
    "\1\110\7\76\1\100\2\76\1\110\6\76\1\110\57\76"+
    "\1\145\1\146\13\145\1\147\5\145\1\150\63\145\1\76"+
    "\1\151\3\76\1\110\2\76\2\152\3\76\1\100\2\76"+
    "\1\110\2\76\1\153\3\76\1\110\6\152\1\76\13\152"+
    "\1\76\13\152\1\76\4\152\1\76\4\152\2\76\5\152"+
    "\1\76\1\151\3\76\1\154\7\76\1\100\2\76\1\154"+
    "\2\76\1\153\3\76\1\154\60\76\1\151\3\76\1\110"+
    "\2\76\2\155\3\76\1\100\2\76\1\110\2\76\1\153"+
    "\3\76\1\110\6\155\1\76\13\155\1\76\13\155\1\76"+
    "\4\155\1\76\4\155\2\76\5\155\1\76\1\151\3\76"+
    "\1\110\2\76\2\155\3\76\1\100\2\76\1\110\2\76"+
    "\1\153\3\76\1\110\6\155\1\76\13\155\1\156\13\155"+
    "\1\76\4\155\1\76\4\155\2\76\5\155\1\157\1\151"+
    "\1\76\1\160\1\157\1\110\4\157\1\161\1\157\1\162"+
    "\1\163\2\157\1\110\2\157\1\164\3\157\1\110\57\157"+
    "\1\165\1\166\13\165\1\167\63\165\1\170\5\165\1\171"+
    "\1\172\1\173\1\174\4\171\2\175\16\171\6\176\1\171"+
    "\13\176\1\171\13\176\1\171\4\176\1\171\4\176\2\171"+
    "\1\177\4\176\1\76\1\200\1\173\1\174\1\76\1\110"+
    "\2\76\2\201\3\76\1\100\2\76\1\110\6\76\1\110"+
    "\6\201\1\76\13\201\1\76\13\201\1\76\4\201\1\76"+
    "\4\201\2\76\5\201\1\76\1\200\1\173\1\174\1\76"+
    "\1\110\2\76\2\201\3\76\1\100\2\76\1\110\6\76"+
    "\1\110\6\201\1\76\13\201\1\202\13\201\1\76\4\201"+
    "\1\76\4\201\2\76\5\201\1\203\1\204\1\173\1\205"+
    "\1\203\1\110\4\203\1\206\1\203\1\207\3\203\1\110"+
    "\6\203\1\110\36\203\1\210\20\203\1\76\1\211\1\212"+
    "\2\76\1\110\7\76\1\100\2\76\1\110\6\76\1\110"+
    "\10\76\1\213\1\214\2\76\1\215\11\76\1\215\1\76"+
    "\1\214\1\213\26\76\1\77\1\212\2\76\1\110\7\76"+
    "\1\100\2\76\1\110\6\76\1\110\6\76\1\216\51\76"+
    "\1\77\1\212\2\76\1\110\2\76\2\217\3\76\1\100"+
    "\2\76\1\110\6\76\1\110\6\217\1\216\13\217\1\76"+
    "\13\217\1\76\4\217\1\76\4\217\2\76\5\217\1\76"+
    "\1\77\1\212\2\76\1\110\7\76\1\100\2\76\1\110"+
    "\6\76\1\110\6\76\1\216\7\76\1\220\6\76\1\221"+
    "\11\76\1\220\13\76\1\221\3\76\1\222\1\77\1\212"+
    "\1\223\1\222\1\110\4\222\1\224\1\222\1\225\1\226"+
    "\2\222\1\110\6\222\1\110\6\222\1\227\50\222\1\230"+
    "\1\77\1\212\1\231\1\230\1\110\4\230\1\232\1\230"+
    "\1\233\1\234\2\230\1\110\6\230\1\110\6\230\1\235"+
    "\50\230\1\236\1\77\1\212\1\237\1\236\1\110\4\236"+
    "\1\240\1\236\1\241\1\242\2\236\1\110\6\236\1\110"+
    "\57\236\1\243\1\244\1\245\12\243\1\246\71\243\1\247"+
    "\1\77\1\212\1\250\1\247\1\110\4\247\1\251\1\247"+
    "\1\252\1\253\2\247\1\110\6\247\1\110\57\247\1\254"+
    "\1\255\1\256\12\254\1\257\71\254\1\260\1\261\13\260"+
    "\1\262\71\260\1\76\1\77\13\76\1\100\11\76\1\102"+
    "\57\76\1\263\1\264\13\263\1\265\71\263\1\76\1\77"+
    "\5\76\1\266\5\76\1\100\11\76\1\102\57\76\1\267"+
    "\1\270\1\173\1\271\1\267\1\110\4\267\1\272\1\267"+
    "\1\273\3\267\1\110\6\267\1\110\36\267\1\274\20\267"+
    "\1\275\1\276\3\275\1\277\6\275\1\300\1\301\2\275"+
    "\1\277\6\275\1\277\36\275\1\302\20\275\1\303\1\276"+
    "\3\303\1\304\4\303\1\305\2\303\1\301\2\303\1\304"+
    "\6\303\1\304\36\303\1\306\20\303\1\307\1\310\10\307"+
    "\1\311\1\307\1\312\1\313\50\307\1\314\12\307\1\315"+
    "\5\307\1\316\1\317\12\316\1\320\1\321\11\316\1\322"+
    "\57\316\1\323\1\324\10\323\1\325\2\323\1\326\11\323"+
    "\1\327\57\323\1\76\1\77\12\76\1\320\1\100\11\76"+
    "\1\102\60\76\1\77\10\76\1\325\2\76\1\100\11\76"+
    "\1\102\57\76\1\330\1\331\10\330\1\332\2\330\1\333"+
    "\1\330\1\334\61\330\1\335\5\330\1\336\1\337\12\336"+
    "\1\300\1\340\1\336\1\341\61\336\1\335\5\336\1\64"+
    "\1\0\11\64\1\0\1\64\1\0\5\64\1\0\42\64"+
    "\1\0\20\64\3\0\1\342\1\343\16\0\1\344\2\0"+
    "\1\345\65\0\1\346\2\0\2\347\6\0\1\346\6\0"+
    "\1\346\6\347\1\0\13\347\1\0\13\347\1\350\4\347"+
    "\1\0\4\347\2\0\5\347\1\351\1\0\11\351\1\0"+
    "\1\351\1\352\1\353\4\351\1\0\63\351\1\64\1\0"+
    "\11\64\1\0\1\64\1\354\5\64\1\0\42\64\1\354"+
    "\20\64\5\0\1\346\2\0\2\355\6\0\1\346\6\0"+
    "\1\346\6\355\1\0\13\355\1\0\13\355\1\0\4\355"+
    "\1\0\4\355\2\0\5\355\1\351\1\0\11\351\1\0"+
    "\2\351\1\356\4\351\1\0\42\351\1\357\20\351\132\0"+
    "\1\344\2\0\1\360\76\0\1\353\114\0\1\361\71\0"+
    "\1\362\101\0\1\363\111\0\1\110\12\0\1\110\6\0"+
    "\1\110\65\0\4\111\7\0\1\111\6\0\6\111\1\0"+
    "\13\111\1\0\13\111\1\0\4\111\1\0\5\111\1\0"+
    "\5\111\6\0\4\111\7\0\1\111\6\0\2\111\2\364"+
    "\2\111\1\0\13\111\1\0\13\111\1\0\4\111\1\0"+
    "\5\111\1\0\5\111\6\0\4\111\7\0\1\111\6\0"+
    "\2\111\1\364\1\365\2\111\1\0\13\111\1\0\13\111"+
    "\1\0\4\111\1\0\5\111\1\0\5\111\6\0\4\111"+
    "\7\0\1\111\6\0\2\111\2\366\2\111\1\0\13\111"+
    "\1\0\13\111\1\0\4\111\1\0\5\111\1\0\5\111"+
    "\5\0\1\115\12\0\1\115\6\0\1\115\61\0\1\367"+
    "\106\0\1\370\112\0\4\123\7\0\1\123\6\0\6\123"+
    "\1\0\13\123\1\0\13\123\1\0\4\123\1\0\5\123"+
    "\1\0\5\123\1\125\2\0\1\371\1\125\1\0\4\125"+
    "\1\0\1\125\1\0\3\125\1\0\6\125\1\0\60\125"+
    "\1\0\1\370\1\371\1\125\1\0\4\125\1\0\1\125"+
    "\1\0\3\125\1\0\6\125\1\0\57\125\1\372\1\0"+
    "\10\372\1\373\2\372\1\374\1\372\1\375\46\372\1\374"+
    "\20\372\1\376\1\0\12\376\1\373\1\377\1\376\1\u0100"+
    "\46\376\1\377\20\376\1\125\2\0\1\371\1\125\1\0"+
    "\4\125\1\0\1\125\1\0\1\125\1\u0101\1\125\1\0"+
    "\6\125\1\0\57\125\2\0\1\134\1\u0102\111\0\4\136"+
    "\7\0\1\136\6\0\6\136\1\0\13\136\1\0\13\136"+
    "\1\0\4\136\1\0\5\136\1\0\5\136\1\140\2\0"+
    "\1\u0103\1\140\1\0\4\140\1\0\1\140\1\0\3\140"+
    "\1\0\6\140\1\0\60\140\1\0\1\134\1\u0104\1\140"+
    "\1\0\4\140\1\0\1\140\1\0\3\140\1\0\6\140"+
    "\1\0\57\140\1\142\1\0\1\u0105\1\u0106\1\142\1\u0105"+
    "\4\142\1\u0107\1\142\1\u0105\1\u0108\1\142\1\u0109\1\u0105"+
    "\6\142\1\u0105\36\142\1\u0108\20\142\1\143\1\0\1\u010a"+
    "\1\u010b\1\143\1\u010a\4\143\1\u010a\1\143\1\u0107\1\u010c"+
    "\1\143\1\u010d\1\u010a\6\143\1\u010a\36\143\1\u010c\20\143"+
    "\1\140\2\0\1\u0103\1\140\1\0\4\140\1\0\1\140"+
    "\1\0\1\140\1\u010e\1\140\1\0\6\140\1\0\57\140"+
    "\2\0\1\u010f\127\0\1\344\2\0\1\u0110\66\0\4\152"+
    "\7\0\1\152\6\0\6\152\1\0\13\152\1\0\13\152"+
    "\1\0\4\152\1\0\5\152\1\0\5\152\2\0\1\u0111"+
    "\111\0\1\154\12\0\1\154\6\0\1\154\65\0\4\155"+
    "\7\0\1\155\6\0\6\155\1\0\13\155\1\0\13\155"+
    "\1\0\4\155\1\0\5\155\1\0\5\155\1\157\2\0"+
    "\1\u0112\1\157\1\0\4\157\1\0\1\157\1\0\3\157"+
    "\1\0\6\157\1\0\57\157\1\u0113\1\0\10\u0113\1\u0114"+
    "\2\u0113\1\u0115\1\u0113\1\u0116\46\u0113\1\u0115\20\u0113\1\u0117"+
    "\1\0\12\u0117\1\u0114\1\u0118\1\u0117\1\u0119\46\u0117\1\u0118"+
    "\20\u0117\1\157\2\0\1\u0112\1\157\1\0\4\157\1\0"+
    "\1\157\1\0\1\157\1\u011a\1\157\1\0\6\157\1\0"+
    "\60\157\1\0\1\u0111\1\u0112\1\157\1\0\4\157\1\0"+
    "\1\157\1\0\3\157\1\0\6\157\1\0\57\157\1\171"+
    "\3\0\24\171\6\0\1\171\13\0\1\171\13\0\1\171"+
    "\4\0\1\171\4\0\2\171\10\0\1\342\17\0\1\344"+
    "\2\0\1\345\62\0\1\u011b\104\0\1\171\2\0\1\u011c"+
    "\2\171\4\175\7\171\1\175\6\171\6\176\1\171\13\176"+
    "\1\171\13\176\1\171\4\176\1\171\4\176\1\175\1\171"+
    "\5\176\3\0\1\u011c\2\0\4\176\7\0\1\176\6\0"+
    "\6\176\1\0\13\176\1\0\13\176\1\0\4\176\1\0"+
    "\5\176\1\0\5\176\3\0\1\u011c\2\0\4\176\7\0"+
    "\1\176\6\0\6\176\1\0\7\176\1\u011d\3\176\1\0"+
    "\13\176\1\0\4\176\1\0\5\176\1\0\5\176\3\0"+
    "\1\342\4\0\2\u011e\11\0\1\344\2\0\1\345\1\0"+
    "\6\u011e\1\0\13\u011e\1\0\13\u011e\1\0\4\u011e\1\0"+
    "\4\u011e\2\0\5\u011e\6\0\4\201\7\0\1\201\6\0"+
    "\6\201\1\0\13\201\1\0\13\201\1\0\4\201\1\0"+
    "\5\201\1\0\5\201\1\203\2\0\1\u011f\1\203\1\0"+
    "\4\203\1\0\1\203\1\0\3\203\1\0\6\203\1\0"+
    "\57\203\3\0\1\342\4\0\2\u0120\11\0\1\344\2\0"+
    "\1\345\1\0\6\u0120\1\0\13\u0120\1\0\13\u0120\1\0"+
    "\4\u0120\1\0\4\u0120\2\0\5\u0120\1\203\1\0\1\u011b"+
    "\1\u011f\1\203\1\0\4\203\1\0\1\203\1\0\3\203"+
    "\1\0\6\203\1\0\57\203\1\u0121\1\0\10\u0121\1\u0122"+
    "\2\u0121\1\u0123\1\u0121\1\u0124\46\u0121\1\u0123\20\u0121\1\u0125"+
    "\1\0\12\u0125\1\u0122\1\u0126\1\u0125\1\u0127\46\u0125\1\u0126"+
    "\20\u0125\1\203\2\0\1\u011f\1\203\1\0\4\203\1\0"+
    "\1\203\1\0\1\203\1\u0128\1\203\1\0\6\203\1\0"+
    "\57\203\3\0\1\342\17\0\1\344\2\0\1\u0110\130\0"+
    "\1\u0129\2\0\1\u0129\75\0\1\u012a\14\0\1\u012a\63\0"+
    "\2\u012b\51\0\24\u012c\1\u012d\62\u012c\6\0\4\217\7\0"+
    "\1\217\6\0\6\217\1\0\13\217\1\0\13\217\1\0"+
    "\4\217\1\0\5\217\1\0\5\217\54\0\1\u012e\5\0"+
    "\1\u012e\116\0\1\u012f\11\0\1\u012f\2\0\1\222\2\0"+
    "\1\u0130\1\222\1\0\4\222\1\0\1\222\1\0\3\222"+
    "\1\0\6\222\1\0\57\222\1\u0131\1\0\10\u0131\1\u0132"+
    "\2\u0131\1\u0133\1\u0131\1\u0134\46\u0131\1\u0133\20\u0131\1\u0135"+
    "\1\0\1\u0135\2\u0136\1\u0135\4\u0136\2\u0135\1\u0137\1\u0138"+
    "\1\u0135\1\u0139\4\u0136\1\u0135\11\u0136\1\u0135\27\u0136\1\u0138"+
    "\10\u0136\3\u0135\5\u0136\1\222\2\0\1\u0130\1\222\1\0"+
    "\4\222\1\0\1\222\1\0\1\222\1\u013a\1\222\1\0"+
    "\6\222\1\0\57\222\1\227\2\u012c\1\u013b\1\227\1\u012c"+
    "\4\227\1\u012c\1\227\1\u012c\3\227\1\u012c\3\227\1\u013c"+
    "\2\227\1\u012c\57\227\1\230\2\0\1\u013d\1\230\1\0"+
    "\4\230\1\0\1\230\1\0\3\230\1\0\6\230\1\0"+
    "\57\230\12\u013e\1\u013f\74\u013e\14\u0140\1\u013f\72\u0140\1\230"+
    "\2\0\1\u013d\1\230\1\0\4\230\1\0\1\230\1\0"+
    "\1\230\1\u0141\1\230\1\0\6\230\1\0\57\230\1\235"+
    "\2\u012c\1\u0142\1\235\1\u012c\4\235\1\u012c\1\235\1\u012c"+
    "\3\235\1\u012c\3\235\1\u0143\2\235\1\u012c\57\235\1\236"+
    "\2\0\1\u0144\1\236\1\0\4\236\1\0\1\236\1\0"+
    "\3\236\1\0\6\236\1\0\57\236\1\u0145\1\0\10\u0145"+
    "\1\u0146\2\u0145\1\u0147\1\u0145\1\u0148\46\u0145\1\u0147\20\u0145"+
    "\1\u0149\1\0\1\u0149\2\u014a\1\u0149\4\u014a\2\u0149\1\u014b"+
    "\1\u014c\1\u0149\1\u014d\4\u014a\1\u0149\11\u014a\1\u0149\27\u014a"+
    "\1\u014c\10\u014a\3\u0149\5\u014a\1\236\2\0\1\u0144\1\236"+
    "\1\0\4\236\1\0\1\236\1\0\1\236\1\u014e\1\236"+
    "\1\0\6\236\1\0\57\236\2\243\1\0\106\243\1\0"+
    "\20\243\1\u014f\2\243\1\u0150\62\243\1\0\13\243\1\u0151"+
    "\70\243\1\247\2\0\1\u0152\1\247\1\0\4\247\1\0"+
    "\1\247\1\0\3\247\1\0\6\247\1\0\57\247\1\u0153"+
    "\1\0\10\u0153\1\u0154\2\u0153\1\u0155\1\u0153\1\u0156\46\u0153"+
    "\1\u0155\20\u0153\1\u0157\1\0\1\u0157\2\u0158\1\u0157\4\u0158"+
    "\2\u0157\1\u0159\1\u015a\1\u0157\1\u015b\4\u0158\1\u0157\11\u0158"+
    "\1\u0157\27\u0158\1\u015a\10\u0158\3\u0157\5\u0158\1\247\2\0"+
    "\1\u0152\1\247\1\0\4\247\1\0\1\247\1\0\1\247"+
    "\1\u015c\1\247\1\0\6\247\1\0\57\247\2\254\1\0"+
    "\106\254\1\0\20\254\1\u015d\2\254\1\u015e\62\254\1\0"+
    "\13\254\1\u015f\70\254\7\0\1\u0160\77\0\1\267\2\0"+
    "\1\u0161\1\267\1\0\4\267\1\0\1\267\1\0\3\267"+
    "\1\0\6\267\1\0\60\267\1\0\1\u011b\1\u0161\1\267"+
    "\1\0\4\267\1\0\1\267\1\0\3\267\1\0\6\267"+
    "\1\0\57\267\1\u0162\1\0\10\u0162\1\u0163\2\u0162\1\u0164"+
    "\1\u0162\1\u0165\46\u0162\1\u0164\20\u0162\1\u0166\1\0\12\u0166"+
    "\1\u0163\1\u0167\1\u0166\1\u0168\46\u0166\1\u0167\20\u0166\1\267"+
    "\2\0\1\u0161\1\267\1\0\4\267\1\0\1\267\1\0"+
    "\1\267\1\u0169\1\267\1\0\6\267\1\0\57\267\1\275"+
    "\1\0\12\275\2\0\50\275\1\0\20\275\3\0\1\u016a"+
    "\17\0\1\344\2\0\1\360\60\0\1\275\1\0\3\275"+
    "\1\277\6\275\2\0\2\275\1\277\6\275\1\277\36\275"+
    "\1\0\20\275\5\0\1\u016b\10\0\1\353\1\0\1\u016b"+
    "\6\0\1\u016b\64\0\1\u016b\10\0\1\u016c\1\0\1\u016b"+
    "\6\0\1\u016b\57\0\1\303\1\0\10\303\1\0\2\303"+
    "\1\0\50\303\1\0\21\303\1\0\3\303\1\304\4\303"+
    "\1\0\2\303\1\0\2\303\1\304\6\303\1\304\36\303"+
    "\1\0\20\303\5\0\1\u016b\10\0\1\u016d\1\0\1\u016b"+
    "\6\0\1\u016b\57\0\12\307\1\0\1\307\1\0\64\307"+
    "\1\0\17\307\1\0\1\307\1\0\6\307\1\u016e\55\307"+
    "\1\0\17\307\1\0\1\307\1\0\1\307\1\u016f\62\307"+
    "\1\0\17\307\1\0\1\307\1\0\1\307\1\u0170\62\307"+
    "\1\0\5\307\14\u0171\1\u0172\106\u0171\1\u0172\6\u0171\1\u0173"+
    "\2\u0171\1\u0174\74\u0171\1\u0172\1\u0171\1\u0175\70\u0171\12\u0176"+
    "\1\u0177\106\u0176\1\u0177\10\u0176\1\u0178\2\u0176\1\u0179\72\u0176"+
    "\1\u0177\3\u0176\1\u017a\70\u0176\12\330\1\0\4\330\1\u017b"+
    "\61\330\1\0\17\330\1\0\4\330\1\u017b\3\330\1\u017c"+
    "\55\330\1\0\17\330\1\0\3\330\1\u017d\1\u017b\61\330"+
    "\1\0\17\330\1\u017e\74\330\14\336\1\0\2\336\1\u017f"+
    "\61\336\1\0\21\336\1\0\2\336\1\u017f\3\336\1\u0180"+
    "\55\336\1\0\21\336\1\0\1\336\1\u0181\1\u017f\61\336"+
    "\1\0\21\336\1\u0182\72\336\7\0\1\u0183\12\0\1\u0184"+
    "\3\0\1\u0185\23\0\1\u0186\43\0\1\u0187\26\0\1\u0188"+
    "\55\0\1\346\2\0\2\u0189\6\0\1\346\6\0\1\346"+
    "\6\u0189\1\0\13\u0189\1\0\13\u0189\1\0\4\u0189\1\0"+
    "\4\u0189\2\0\5\u0189\1\u018a\1\0\3\u018a\1\u018b\4\347"+
    "\1\u018a\1\0\4\u018a\1\u018b\1\347\1\u018a\1\0\3\u018a"+
    "\1\u018b\6\347\1\u018a\13\347\1\u018a\13\347\1\u018a\4\347"+
    "\1\u018c\5\347\1\u018a\5\347\21\0\1\u018d\7\0\1\u018e"+
    "\72\0\1\352\107\0\1\351\70\0\1\u018a\1\0\3\u018a"+
    "\1\u018b\4\355\1\u018a\1\0\4\u018a\1\u018b\1\355\1\u018a"+
    "\1\0\3\u018a\1\u018b\6\355\1\u018a\13\355\1\u018a\13\355"+
    "\1\u018a\4\355\1\u018f\5\355\1\u018a\5\355\101\356\1\u0190"+
    "\5\356\66\0\1\357\56\0\1\u0188\52\0\1\u0191\106\0"+
    "\1\u0192\112\0\4\111\7\0\1\111\6\0\4\111\2\u0193"+
    "\1\0\13\111\1\0\13\111\1\0\4\111\1\0\5\111"+
    "\1\0\5\111\6\0\4\111\7\0\1\111\6\0\4\111"+
    "\1\u0193\1\u0194\1\0\13\111\1\0\13\111\1\0\4\111"+
    "\1\0\5\111\1\0\5\111\6\0\4\111\7\0\1\111"+
    "\6\0\6\111\1\0\13\111\1\0\2\111\1\u0195\10\111"+
    "\1\0\4\111\1\0\5\111\1\0\1\111\1\u0195\3\111"+
    "\12\372\1\373\3\372\1\0\71\372\1\0\10\372\1\373"+
    "\2\372\1\u0196\1\372\1\375\46\372\1\u0196\20\372\14\376"+
    "\1\373\1\376\1\0\71\376\1\0\12\376\1\373\1\u0197"+
    "\1\376\1\u0100\46\376\1\u0197\20\376\1\u0105\1\0\10\u0105"+
    "\1\u0107\2\u0105\1\u0198\1\u0105\1\u0199\46\u0105\1\u0198\20\u0105"+
    "\1\142\2\u0105\1\u0106\1\142\1\u0105\4\142\1\u0107\1\142"+
    "\1\u0105\1\142\1\140\1\142\1\u0105\6\142\1\u0105\60\142"+
    "\1\0\1\u0105\1\u0106\1\142\1\u0105\4\142\1\u0107\1\142"+
    "\1\u0105\1\u019a\1\142\1\u0109\1\u0105\6\142\1\u0105\36\142"+
    "\1\u019a\20\142\1\u010a\1\0\12\u010a\1\u0107\1\u019b\1\u010a"+
    "\1\u019c\46\u010a\1\u019b\20\u010a\1\143\2\u010a\1\u010b\1\143"+
    "\1\u010a\4\143\1\u010a\1\143\1\u0107\1\143\1\140\1\143"+
    "\1\u010a\6\143\1\u010a\60\143\1\0\1\u010a\1\u010b\1\143"+
    "\1\u010a\4\143\1\u010a\1\143\1\u0107\1\u019d\1\143\1\u010d"+
    "\1\u010a\6\143\1\u010a\36\143\1\u019d\20\143\12\u0113\1\u0114"+
    "\3\u0113\1\0\71\u0113\1\0\10\u0113\1\u0114\2\u0113\1\u019e"+
    "\1\u0113\1\u0116\46\u0113\1\u019e\20\u0113\14\u0117\1\u0114\1\u0117"+
    "\1\0\71\u0117\1\0\12\u0117\1\u0114\1\u019f\1\u0117\1\u0119"+
    "\46\u0117\1\u019f\20\u0117\6\0\4\176\7\0\1\176\6\0"+
    "\6\176\1\0\13\176\1\0\13\176\1\0\4\176\1\0"+
    "\5\176\1\0\5\176\3\0\1\u011c\2\0\4\176\7\0"+
    "\1\176\6\0\6\176\1\0\13\176\1\0\13\176\1\0"+
    "\4\176\1\0\5\176\1\0\1\176\1\u01a0\3\176\6\0"+
    "\4\u011e\7\0\1\u011e\6\0\6\u011e\1\0\13\u011e\1\0"+
    "\13\u011e\1\0\4\u011e\1\0\5\u011e\1\0\5\u011e\6\0"+
    "\4\u0120\7\0\1\u0120\6\0\6\u0120\1\0\13\u0120\1\0"+
    "\13\u0120\1\0\4\u0120\1\0\5\u0120\1\0\5\u0120\12\u0121"+
    "\1\u0122\3\u0121\1\0\71\u0121\1\0\10\u0121\1\u0122\2\u0121"+
    "\1\u01a1\1\u0121\1\u0124\46\u0121\1\u01a1\20\u0121\14\u0125\1\u0122"+
    "\1\u0125\1\0\71\u0125\1\0\12\u0125\1\u0122\1\u01a2\1\u0125"+
    "\1\u0127\46\u0125\1\u01a2\20\u0125\1\u01a3\2\u01a4\1\u01a5\1\u01a3"+
    "\1\u01a4\4\u01a3\1\u01a4\1\u01a3\1\u01a4\3\u01a3\1\u01a4\6\u01a3"+
    "\1\u01a4\51\u01a3\1\203\5\u01a3\37\0\1\u01a6\35\0\1\u01a6"+
    "\53\0\1\u01a7\14\0\1\u01a7\73\0\1\u01a8\11\0\1\u01a8"+
    "\76\0\1\u01a9\20\0\1\u01a9\113\0\1\u01aa\10\0\1\u01aa"+
    "\1\0\12\u0131\1\u0132\3\u0131\1\0\71\u0131\1\0\10\u0131"+
    "\1\u0132\2\u0131\1\u01ab\1\u0131\1\u0134\46\u0131\1\u01ab\20\u0131"+
    "\1\u0135\1\0\12\u0135\1\u0132\1\u01ac\1\u0135\1\u0139\46\u0135"+
    "\1\u01ac\21\u0135\1\0\12\u0135\1\u01ad\1\u01ac\1\u0135\1\u0139"+
    "\46\u0135\1\u01ac\20\u0135\14\0\1\u01ae\72\0\14\u0135\1\u01ad"+
    "\1\u0135\1\0\71\u0135\1\0\12\u0135\1\u0132\1\u01af\1\u0135"+
    "\1\u0139\46\u0135\1\u01af\20\u0135\12\u0145\1\u0146\3\u0145\1\0"+
    "\71\u0145\1\0\10\u0145\1\u0146\2\u0145\1\u01b0\1\u0145\1\u0148"+
    "\46\u0145\1\u01b0\20\u0145\1\u0149\1\0\12\u0149\1\u0146\1\u01b1"+
    "\1\u0149\1\u014d\46\u0149\1\u01b1\21\u0149\1\0\12\u0149\1\u01b2"+
    "\1\u01b1\1\u0149\1\u014d\46\u0149\1\u01b1\20\u0149\14\0\1\u01b3"+
    "\72\0\14\u0149\1\u01b2\1\u0149\1\0\71\u0149\1\0\12\u0149"+
    "\1\u0146\1\u01b4\1\u0149\1\u014d\46\u0149\1\u01b4\20\u0149\2\243"+
    "\1\0\4\243\1\u01b5\12\243\1\u01b6\3\243\1\u01b7\23\243"+
    "\1\u01b8\36\243\1\0\33\243\1\u01b9\50\243\12\u0153\1\u0154"+
    "\3\u0153\1\0\71\u0153\1\0\10\u0153\1\u0154\2\u0153\1\u01ba"+
    "\1\u0153\1\u0156\46\u0153\1\u01ba\20\u0153\1\u0157\1\0\12\u0157"+
    "\1\u0154\1\u01bb\1\u0157\1\u015b\46\u0157\1\u01bb\21\u0157\1\0"+
    "\12\u0157\1\u01bc\1\u01bb\1\u0157\1\u015b\46\u0157\1\u01bb\20\u0157"+
    "\14\0\1\u01bd\72\0\14\u0157\1\u01bc\1\u0157\1\0\71\u0157"+
    "\1\0\12\u0157\1\u0154\1\u01be\1\u0157\1\u015b\46\u0157\1\u01be"+
    "\20\u0157\2\254\1\0\4\254\1\u01bf\12\254\1\u01c0\3\254"+
    "\1\u01c1\23\254\1\u01c2\36\254\1\0\33\254\1\u01c3\50\254"+
    "\23\0\1\u01c4\63\0\12\u0162\1\u0163\3\u0162\1\0\71\u0162"+
    "\1\0\10\u0162\1\u01c5\2\u0162\1\u01c6\1\u0162\1\u0165\46\u0162"+
    "\1\u01c6\20\u0162\14\u0166\1\u0163\1\u0166\1\0\71\u0166\1\0"+
    "\12\u0166\1\u01c7\1\u01c8\1\u0166\1\u0168\46\u0166\1\u01c8\20\u0166"+
    "\1\u01c9\2\u01a4\1\u01ca\1\u01c9\1\u01a4\4\u01c9\1\u01a4\1\u01c9"+
    "\1\u01a4\3\u01c9\1\u01a4\6\u01c9\1\u01a4\51\u01c9\1\267\5\u01c9"+
    "\5\0\1\u016b\12\0\1\u016b\6\0\1\u016b\57\0\7\307"+
    "\1\u01cb\2\307\1\0\1\307\1\0\5\307\1\u01cc\3\307"+
    "\1\u01cd\23\307\1\u01ce\26\307\1\0\5\307\7\u0171\1\u01cf"+
    "\4\u0171\1\u0172\5\u0171\1\u01d0\3\u0171\1\u01d1\23\u0171\1\u01d2"+
    "\50\u0171\1\u0172\21\u0171\1\u01d3\50\u0171\7\u0176\1\u01d4\2\u0176"+
    "\1\u0177\7\u0176\1\u01d5\3\u0176\1\u01d6\23\u0176\1\u01d7\46\u0176"+
    "\1\u0177\23\u0176\1\u01d8\50\u0176\12\330\1\0\103\330\1\u01d9"+
    "\2\330\1\0\4\330\1\u017b\2\330\1\u01da\3\330\1\u01db"+
    "\23\330\1\u01dc\26\330\1\0\5\330\17\u01dd\1\u01de\67\u01dd"+
    "\14\336\1\0\101\336\1\u01df\4\336\1\0\2\336\1\u017f"+
    "\2\336\1\u01e0\3\336\1\u01e1\23\336\1\u01e2\26\336\1\0"+
    "\5\336\17\u01e3\1\u01e4\67\u01e3\7\0\1\u01e5\106\0\1\u01e6"+
    "\136\0\1\u01e7\47\0\1\u0189\1\0\11\u0189\1\0\7\u0189"+
    "\1\0\63\u0189\1\u018a\1\0\11\u018a\1\0\7\u018a\1\0"+
    "\47\u018a\1\0\14\u018a\1\0\3\u018a\1\u018b\5\u018a\1\0"+
    "\4\u018a\1\u018b\2\u018a\1\0\3\u018a\1\u018b\43\u018a\1\u01e8"+
    "\13\u018a\21\0\1\u018d\51\0\1\u01e9\34\0\1\u01ea\15\0"+
    "\3\u01ea\2\0\1\u01ea\11\0\1\u01ea\1\0\2\u01ea\7\0"+
    "\1\u01ea\2\0\2\u01ea\7\0\1\u01ea\7\0\1\111\1\u01eb"+
    "\2\111\7\0\1\111\6\0\6\111\1\0\13\111\1\0"+
    "\13\111\1\0\4\111\1\0\5\111\1\0\5\111\6\0"+
    "\4\111\7\0\1\111\6\0\6\111\1\0\11\111\1\u01ec"+
    "\1\111\1\0\1\u01ec\12\111\1\0\4\111\1\0\5\111"+
    "\1\0\5\111\12\372\1\373\74\372\14\376\1\373\72\376"+
    "\12\u0105\1\u0107\3\u0105\1\0\71\u0105\1\0\10\u0105\1\u0107"+
    "\2\u0105\1\u01ed\1\u0105\1\u0199\46\u0105\1\u01ed\20\u0105\1\142"+
    "\2\u0105\1\u0106\1\142\1\u0105\4\142\1\u0107\1\142\1\u0105"+
    "\3\142\1\u0105\6\142\1\u0105\57\142\14\u010a\1\u0107\1\u010a"+
    "\1\0\71\u010a\1\0\12\u010a\1\u0107\1\u01ee\1\u010a\1\u019c"+
    "\46\u010a\1\u01ee\20\u010a\1\143\2\u010a\1\u010b\1\143\1\u010a"+
    "\4\143\1\u010a\1\143\1\u0107\3\143\1\u010a\6\143\1\u010a"+
    "\57\143\12\u0113\1\u0114\74\u0113\14\u0117\1\u0114\72\u0117\3\0"+
    "\1\u011c\2\0\3\176\1\u01ef\7\0\1\176\6\0\6\176"+
    "\1\0\13\176\1\0\13\176\1\0\4\176\1\0\5\176"+
    "\1\0\5\176\12\u0121\1\u0122\74\u0121\14\u0125\1\u0122\72\u0125"+
    "\1\u01a3\2\u01a4\1\u01a5\1\u01a3\1\u01a4\4\u01a3\1\u01a4\1\u01a3"+
    "\1\u01a4\3\u01a3\1\u01a4\6\u01a3\1\u01a4\51\u01a3\1\u01f0\5\u01a3"+
    "\101\u01a4\1\u01f1\5\u01a4\42\0\1\u01f2\14\0\1\u01f2\63\0"+
    "\2\u01f3\103\0\2\u01f4\115\0\1\u01f5\14\0\1\u01f5\63\0"+
    "\2\u01f6\51\0\12\u0131\1\u0132\74\u0131\14\u0135\1\u0132\1\u0135"+
    "\1\0\70\u0135\3\0\2\u01f7\1\0\4\u01f7\2\0\1\u0137"+
    "\1\u01f7\2\0\4\u01f7\1\0\11\u01f7\1\0\40\u01f7\3\0"+
    "\5\u01f7\14\u0135\1\u0132\72\u0135\12\u0145\1\u0146\74\u0145\14\u0149"+
    "\1\u0146\1\u0149\1\0\70\u0149\3\0\2\u01f8\1\0\4\u01f8"+
    "\2\0\1\u014b\1\u01f8\2\0\4\u01f8\1\0\11\u01f8\1\0"+
    "\40\u01f8\3\0\5\u01f8\14\u0149\1\u0146\72\u0149\2\243\1\0"+
    "\4\243\1\u01f9\101\243\1\0\34\243\1\u01fa\47\243\12\u0153"+
    "\1\u0154\74\u0153\14\u0157\1\u0154\1\u0157\1\0\70\u0157\3\0"+
    "\2\u01fb\1\0\4\u01fb\2\0\1\u0159\1\u01fb\2\0\4\u01fb"+
    "\1\0\11\u01fb\1\0\40\u01fb\3\0\5\u01fb\14\u0157\1\u0154"+
    "\72\u0157\2\254\1\0\4\254\1\u01fc\101\254\1\0\34\254"+
    "\1\u01fd\47\254\2\0\1\u01fe\104\0\12\u0162\1\u0163\74\u0162"+
    "\14\u0166\1\u0163\72\u0166\1\u01c9\2\u01a4\1\u01ca\1\u01c9\1\u01a4"+
    "\4\u01c9\1\u01a4\1\u01c9\1\u01a4\3\u01c9\1\u01a4\6\u01c9\1\u01a4"+
    "\51\u01c9\1\u01ff\5\u01c9\7\307\1\u0200\2\307\1\0\1\307"+
    "\1\0\64\307\1\0\5\307\7\u0171\1\u0201\4\u0171\1\u0172"+
    "\106\u0171\1\u0172\22\u0171\1\u0202\47\u0171\7\u0176\1\u0203\2\u0176"+
    "\1\u0177\106\u0176\1\u0177\24\u0176\1\u0204\47\u0176\7\330\1\u0205"+
    "\2\330\1\0\4\330\1\u017b\61\330\1\0\5\330\12\u0206"+
    "\1\u0207\66\u0206\1\0\5\u0206\7\336\1\u0208\4\336\1\0"+
    "\2\336\1\u017f\61\336\1\0\5\336\14\u0209\1\u0207\64\u0209"+
    "\1\0\5\u0209\40\0\1\u020a\141\0\1\u01e8\34\0\1\u01ea"+
    "\15\0\3\u01ea\2\0\1\u01ea\11\0\1\u01ea\1\0\2\u01ea"+
    "\7\0\1\u01ea\1\0\1\u01e9\2\u01ea\7\0\1\u01ea\7\0"+
    "\4\111\7\0\1\111\6\0\6\111\1\0\7\111\1\u020b"+
    "\3\111\1\0\13\111\1\0\4\111\1\0\5\111\1\0"+
    "\5\111\6\0\4\111\7\0\1\111\6\0\6\111\1\0"+
    "\6\111\1\u020c\4\111\1\0\13\111\1\0\1\111\1\u020c"+
    "\2\111\1\0\5\111\1\0\5\111\12\u0105\1\u0107\74\u0105"+
    "\14\u010a\1\u0107\72\u010a\3\0\1\u011c\2\0\4\176\7\0"+
    "\1\176\6\0\6\176\1\0\6\176\1\u020d\4\176\1\0"+
    "\6\176\1\u020e\4\176\1\0\4\176\1\0\5\176\1\0"+
    "\5\176\54\0\1\u020f\5\0\1\u020f\73\0\1\u0210\14\0"+
    "\1\u0210\66\0\1\u0211\11\0\1\u0211\74\0\1\u0212\11\0"+
    "\1\u0212\77\0\1\u0213\14\0\1\u0213\22\0\2\243\1\0"+
    "\35\243\1\u0214\46\243\2\254\1\0\35\254\1\u0215\46\254"+
    "\14\u0171\1\u0172\23\u0171\1\u0216\46\u0171\12\u0176\1\u0177\25\u0176"+
    "\1\u0217\46\u0176\12\u0206\1\u01dd\4\u0206\1\u0218\61\u0206\1\u01dd"+
    "\5\u0206\14\u0209\1\u01e3\2\u0209\1\u0219\61\u0209\1\u01e3\5\u0209"+
    "\41\0\1\u021a\53\0\4\111\7\0\1\111\6\0\6\111"+
    "\1\0\13\111\1\0\4\111\1\u021b\6\111\1\0\4\111"+
    "\1\0\5\111\1\0\5\111\6\0\4\111\7\0\1\111"+
    "\6\0\6\111\1\0\3\111\1\u021c\7\111\1\0\4\111"+
    "\1\u021c\6\111\1\0\4\111\1\0\5\111\1\0\5\111"+
    "\3\0\1\u011c\2\0\4\176\7\0\1\176\6\0\6\176"+
    "\1\0\11\176\1\u021d\1\176\1\0\13\176\1\0\4\176"+
    "\1\0\5\176\1\0\5\176\3\0\1\u011c\2\0\4\176"+
    "\7\0\1\176\6\0\6\176\1\0\10\176\1\u021e\2\176"+
    "\1\0\13\176\1\0\4\176\1\0\5\176\1\0\5\176"+
    "\55\0\1\u021f\25\0\1\u021f\51\0\1\u0220\20\0\1\u0220"+
    "\70\0\1\u0221\13\0\1\u0221\53\0\2\u0222\112\0\1\u0223"+
    "\35\0\1\u0223\11\0\2\243\1\0\36\243\1\u0224\45\243"+
    "\2\254\1\0\36\254\1\u0225\45\254\14\u0171\1\u0172\24\u0171"+
    "\1\u0226\45\u0171\12\u0176\1\u0177\26\u0176\1\u0227\45\u0176\12\u0206"+
    "\1\u0228\4\u0206\1\u0218\61\u0206\1\u01dd\5\u0206\14\u0209\1\u0229"+
    "\2\u0209\1\u0219\61\u0209\1\u01e3\5\u0209\42\0\1\u022a\52\0"+
    "\4\111\7\0\1\111\6\0\6\111\1\0\13\111\1\0"+
    "\7\111\1\u022b\3\111\1\0\4\111\1\0\5\111\1\0"+
    "\5\111\3\0\1\u011c\2\0\4\176\7\0\1\176\6\0"+
    "\6\176\1\0\11\176\1\u022c\1\176\1\0\13\176\1\0"+
    "\4\176\1\0\5\176\1\0\5\176\3\0\1\u011c\2\0"+
    "\4\176\7\0\1\176\6\0\6\176\1\0\6\176\1\u022d"+
    "\4\176\1\0\13\176\1\0\4\176\1\0\5\176\1\0"+
    "\5\176\44\0\1\u022e\11\0\1\u022e\72\0\1\u022f\14\0"+
    "\1\u022f\71\0\1\u0230\14\0\1\u0230\27\0\2\243\1\0"+
    "\37\243\1\u0231\44\243\2\254\1\0\37\254\1\u0232\44\254"+
    "\14\u0171\1\u0172\25\u0171\1\u0233\44\u0171\12\u0176\1\u0177\27\u0176"+
    "\1\u0234\44\u0176\41\0\1\u0235\53\0\4\111\7\0\1\111"+
    "\6\0\5\111\1\u0236\1\0\13\111\1\0\13\111\1\0"+
    "\4\111\1\0\5\111\1\0\5\111\3\0\1\u011c\2\0"+
    "\4\176\7\0\1\176\6\0\6\176\1\0\13\176\1\0"+
    "\4\176\1\u0237\6\176\1\0\4\176\1\0\5\176\1\0"+
    "\5\176\3\0\1\u011c\2\0\4\176\7\0\1\176\6\0"+
    "\6\176\1\0\5\176\1\u0238\5\176\1\0\13\176\1\0"+
    "\4\176\1\0\5\176\1\0\5\176\2\243\1\0\36\243"+
    "\1\u0239\45\243\2\254\1\0\36\254\1\u023a\45\254\14\u0171"+
    "\1\u0172\24\u0171\1\u023b\45\u0171\12\u0176\1\u0177\26\u0176\1\u023c"+
    "\45\u0176\36\0\1\u023d\56\0\4\111\7\0\1\111\6\0"+
    "\6\111\1\0\5\111\1\u023e\5\111\1\0\13\111\1\0"+
    "\4\111\1\0\5\111\1\0\5\111\3\0\1\u011c\2\0"+
    "\4\176\7\0\1\176\6\0\6\176\1\0\13\176\1\0"+
    "\13\176\1\0\4\176\1\0\1\176\1\u023f\3\176\1\0"+
    "\5\176\2\243\1\0\33\243\1\u0240\50\243\2\254\1\0"+
    "\33\254\1\u0241\50\254\14\u0171\1\u0172\21\u0171\1\u0242\50\u0171"+
    "\12\u0176\1\u0177\23\u0176\1\u0243\50\u0176\6\0\4\111\7\0"+
    "\1\111\6\0\6\111\1\0\7\111\1\u0244\3\111\1\0"+
    "\13\111\1\0\4\111\1\0\5\111\1\0\5\111\3\0"+
    "\1\u011c\2\0\4\176\7\0\1\176\6\0\6\176\1\0"+
    "\13\176\1\0\4\176\1\u0245\6\176\1\0\4\176\1\0"+
    "\5\176\1\0\5\176\6\0\4\111\7\0\1\111\6\0"+
    "\6\111\1\0\13\111\1\0\13\111\1\0\4\111\1\0"+
    "\5\111\1\0\4\111\1\u0246\3\0\1\u011c\2\0\4\176"+
    "\7\0\1\176\6\0\6\176\1\0\10\176\1\u0247\2\176"+
    "\1\0\13\176\1\0\4\176\1\0\5\176\1\0\5\176"+
    "\6\0\4\111\7\0\1\111\6\0\6\111\1\0\5\111"+
    "\1\u0248\5\111\1\0\13\111\1\0\4\111\1\0\5\111"+
    "\1\0\5\111\3\0\1\u011c\2\0\4\176\7\0\1\176"+
    "\6\0\6\176\1\0\4\176\1\u0249\6\176\1\0\13\176"+
    "\1\0\4\176\1\0\5\176\1\0\5\176\6\0\4\111"+
    "\7\0\1\111\6\0\6\111\1\0\5\111\1\u024a\5\111"+
    "\1\0\13\111\1\0\4\111\1\0\5\111\1\0\5\111"+
    "\3\0\1\u011c\2\0\4\176\7\0\1\176\6\0\6\176"+
    "\1\0\5\176\1\u024b\5\176\1\0\13\176\1\0\4\176"+
    "\1\0\5\176\1\0\5\176\6\0\4\111\7\0\1\111"+
    "\6\0\6\111\1\0\13\111\1\0\4\111\1\u024c\6\111"+
    "\1\0\4\111\1\0\5\111\1\0\5\111\3\u024d\1\u024e"+
    "\2\u024d\4\u024f\7\u024d\1\u024f\5\u024d\1\0\6\u024f\1\u024d"+
    "\13\u024f\1\u024d\13\u024f\1\u024d\4\u024f\1\u024d\5\u024f\1\u024d"+
    "\5\u024f\43\0\1\u0250\3\0\1\u0251\7\0\1\u0252\1\u0253"+
    "\22\0\1\u0254\11\0\4\176\7\0\1\176\6\0\6\176"+
    "\1\0\4\176\1\u0255\3\176\1\u0256\2\176\1\0\4\176"+
    "\1\u0257\1\u0258\5\176\1\0\4\176\1\0\5\176\1\0"+
    "\1\176\1\u0259\3\176\3\0\1\u011c\2\0\4\176\7\0"+
    "\1\176\6\0\6\176\1\0\4\176\1\u0255\3\176\1\u0256"+
    "\2\176\1\0\4\176\1\u0257\1\u0258\5\176\1\0\4\176"+
    "\1\0\5\176\1\0\1\176\1\u0259\3\176\60\0\1\u025a"+
    "\77\0\1\u025b\115\0\1\u025c\105\0\1\u025d\107\0\1\u025e"+
    "\31\0\1\u011c\2\0\4\176\7\0\1\176\6\0\6\176"+
    "\1\0\13\176\1\0\5\176\1\u025f\5\176\1\0\4\176"+
    "\1\0\5\176\1\0\5\176\3\0\1\u011c\2\0\4\176"+
    "\7\0\1\176\6\0\6\176\1\0\12\176\1\u0260\1\0"+
    "\13\176\1\0\4\176\1\0\5\176\1\0\5\176\3\0"+
    "\1\u011c\2\0\4\176\7\0\1\176\6\0\6\176\1\0"+
    "\13\176\1\0\5\176\1\u0261\5\176\1\0\4\176\1\0"+
    "\5\176\1\0\5\176\3\0\1\u011c\2\0\4\176\7\0"+
    "\1\176\6\0\6\176\1\0\13\176\1\0\4\176\1\u0262"+
    "\6\176\1\0\4\176\1\0\5\176\1\0\5\176\3\0"+
    "\1\u011c\2\0\4\176\7\0\1\176\6\0\6\176\1\0"+
    "\13\176\1\0\5\176\1\u0263\5\176\1\0\4\176\1\0"+
    "\5\176\1\0\5\176\45\0\1\u0264\136\0\1\u0265\107\0"+
    "\1\u0266\67\0\1\u0267\125\0\1\u0268\13\0\1\u011c\2\0"+
    "\4\176\7\0\1\176\6\0\6\176\1\0\6\176\1\u0269"+
    "\4\176\1\0\13\176\1\0\4\176\1\0\5\176\1\0"+
    "\5\176\3\0\1\u011c\2\0\4\176\7\0\1\176\6\0"+
    "\6\176\1\0\13\176\1\0\13\176\1\0\4\176\1\0"+
    "\1\176\1\u026a\3\176\1\0\5\176\3\0\1\u011c\2\0"+
    "\4\176\7\0\1\176\6\0\6\176\1\0\13\176\1\0"+
    "\13\176\1\0\4\176\1\0\2\176\1\u026b\2\176\1\0"+
    "\5\176\3\0\1\u011c\2\0\4\176\7\0\1\176\6\0"+
    "\6\176\1\0\13\176\1\0\4\176\1\u026c\6\176\1\0"+
    "\4\176\1\0\5\176\1\0\5\176\3\0\1\u011c\2\0"+
    "\4\176\7\0\1\176\6\0\6\176\1\0\13\176\1\0"+
    "\13\176\1\0\4\176\1\0\2\176\1\u026d\2\176\1\0"+
    "\5\176\47\0\1\u026e\74\0\1\u026f\106\0\1\u0270\116\0"+
    "\1\u0271\105\0\1\u0272\45\0\1\u011c\2\0\4\176\7\0"+
    "\1\176\6\0\6\176\1\0\10\176\1\u0273\2\176\1\0"+
    "\13\176\1\0\4\176\1\0\5\176\1\0\5\176\3\0"+
    "\1\u011c\2\0\4\176\7\0\1\176\6\0\5\176\1\u0274"+
    "\1\0\13\176\1\0\13\176\1\0\4\176\1\0\5\176"+
    "\1\0\5\176\3\0\1\u011c\2\0\4\176\7\0\1\176"+
    "\6\0\5\176\1\u0275\1\0\13\176\1\0\13\176\1\0"+
    "\4\176\1\0\5\176\1\0\5\176\3\0\1\u011c\2\0"+
    "\4\176\7\0\1\176\6\0\6\176\1\0\6\176\1\u0276"+
    "\4\176\1\0\13\176\1\0\4\176\1\0\5\176\1\0"+
    "\5\176\3\0\1\u011c\2\0\4\176\7\0\1\176\6\0"+
    "\6\176\1\0\5\176\1\u0277\5\176\1\0\13\176\1\0"+
    "\4\176\1\0\5\176\1\0\5\176\60\0\1\u0278\132\0"+
    "\1\u0279\51\0\1\u027a\106\0\1\u027b\42\0\1\u011c\2\0"+
    "\4\176\7\0\1\176\6\0\6\176\1\0\13\176\1\0"+
    "\5\176\1\u027c\5\176\1\0\4\176\1\0\5\176\1\0"+
    "\5\176\3\0\1\u011c\2\0\4\176\7\0\1\176\6\0"+
    "\6\176\1\0\13\176\1\0\13\176\1\0\4\176\1\0"+
    "\5\176\1\0\2\176\1\u027d\2\176\3\0\1\u011c\2\0"+
    "\4\176\7\0\1\176\6\0\6\176\1\0\10\176\1\u027e"+
    "\2\176\1\0\13\176\1\0\4\176\1\0\5\176\1\0"+
    "\5\176\3\0\1\u011c\2\0\4\176\7\0\1\176\6\0"+
    "\6\176\1\0\10\176\1\u027f\2\176\1\0\13\176\1\0"+
    "\4\176\1\0\5\176\1\0\5\176\105\0\1\u0280\62\0"+
    "\1\u0268\132\0\1\u0272\106\0\1\u0281\4\0\1\u011c\2\0"+
    "\4\176\7\0\1\176\6\0\6\176\1\0\13\176\1\0"+
    "\13\176\1\0\4\176\1\0\5\176\1\0\3\176\1\u0282"+
    "\1\176\3\0\1\u011c\2\0\4\176\7\0\1\176\6\0"+
    "\6\176\1\0\13\176\1\0\6\176\1\u026d\4\176\1\0"+
    "\4\176\1\0\5\176\1\0\5\176\3\0\1\u011c\2\0"+
    "\4\176\7\0\1\176\6\0\6\176\1\0\13\176\1\0"+
    "\13\176\1\0\4\176\1\0\5\176\1\0\3\176\1\u0277"+
    "\1\176\3\0\1\u011c\2\0\4\176\7\0\1\176\6\0"+
    "\6\176\1\0\13\176\1\0\13\176\1\0\4\176\1\0"+
    "\5\176\1\0\3\176\1\u0283\1\176\35\0\1\u0268\155\0"+
    "\1\u0284\5\0\1\u011c\2\0\4\176\7\0\1\176\6\0"+
    "\5\176\1\u026d\1\0\13\176\1\0\13\176\1\0\4\176"+
    "\1\0\5\176\1\0\5\176\3\0\1\u011c\2\0\4\176"+
    "\7\0\1\176\6\0\6\176\1\0\13\176\1\0\13\176"+
    "\1\0\4\176\1\0\5\176\1\0\2\176\1\u0285\2\176"+
    "\57\0\1\u0268\32\0\1\u011c\2\0\4\176\7\0\1\176"+
    "\6\0\6\176\1\0\13\176\1\0\4\176\1\u026d\6\176"+
    "\1\0\4\176\1\0\5\176\1\0\5\176";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack(yy_packed);


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  // final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",		//$NON-NLS-1$
    "Internal error: unknown state",		//$NON-NLS-1$
    "Error: could not match input",		//$NON-NLS-1$
    "Error: pushback value was too large"	//$NON-NLS-1$
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     1,  0,  0,  0,  0,  1,  0,  0,  1,  1,  1,  0,  1,  1,  1,  1, 
     0,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  0,  0,  0,  0,  1,  1,  1,  1,  0,  0,  0, 
     0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  9,  1,  1, 
     1,  9,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1, 
     1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  9,  1, 
     1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1, 
     1,  1,  1,  1,  9,  1,  1,  9,  1,  1,  9,  1,  1,  1,  1,  1, 
     1,  9,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  9, 
     1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9, 
     1,  1,  1,  1,  9,  1,  1,  1,  9,  9,  1,  1,  9,  3,  3,  9, 
     3,  3,  3,  3,  9,  3,  3,  1,  1,  9,  1,  1,  9,  1,  1,  1, 
     1,  9,  9,  1,  1,  0,  1,  0,  9,  1,  9,  0,  1,  2,  1,  0, 
     0,  0,  9,  1,  1,  1,  9,  9,  0,  0,  9,  0,  0,  0,  0,  0, 
     1,  0,  0,  0,  0,  0,  9,  1,  1,  0,  0,  1,  1,  1,  9,  0, 
     9,  0,  0,  9,  0,  0,  0,  0,  0,  1,  9,  0,  1,  1,  0,  1, 
     0,  9,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  9,  0,  0,  0, 
     0,  9,  0,  0,  0,  0,  1,  0,  0,  1,  0,  1,  0,  0,  9,  0, 
     1,  0,  1,  0,  0,  9,  0,  0,  0,  0,  1,  0,  0,  1,  1,  1, 
     1,  0,  0,  9,  0,  0,  0,  0,  1,  0,  0,  1,  1,  1,  1,  0, 
     0,  0,  9,  0,  0,  0,  0,  0,  1,  9,  1,  9,  9,  1,  1,  1, 
     2, 13,  3,  2,  3,  2, 13,  3,  2,  3,  0,  1,  1,  1,  0,  1, 
     1,  1,  0,  9,  9,  9,  0,  0,  1,  1,  1,  9,  0,  0,  9, 13, 
     9,  9,  1,  1,  1,  0,  0,  0,  0,  1,  0,  0,  1,  0,  0,  1, 
     0,  0,  3,  2,  2,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0, 
     0,  1,  0,  0,  1,  1,  1,  1,  1,  0,  0,  1,  0,  0,  1,  1, 
     1,  1,  1,  0,  1,  0,  1,  0,  3,  2,  1,  1,  1,  1,  2,  3, 
     3,  3,  2,  2,  3,  3,  3,  2,  1,  1,  1,  1,  0,  0,  1,  1, 
     1,  1,  0,  0,  9,  9,  0,  1,  9,  0,  1,  1,  0,  0,  1,  5, 
    13,  0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  1,  1,  9,  5,  1, 
     3,  2,  3,  2,  1,  0,  9,  1,  0,  0,  1,  1,  1,  1,  0,  0, 
     0,  0,  0,  1,  1,  2,  2,  0,  0,  0,  1,  1,  1,  1,  0,  0, 
     0,  9,  9,  1,  1,  2,  2,  1,  1,  0,  1,  1,  1,  9,  9,  9, 
     1,  1,  2,  2,  0,  1,  1,  1,  1,  1,  2,  2,  9,  1,  1,  1, 
     1,  3,  3,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  1,  0, 
     0,  0,  0,  0,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  1,  1, 
     1,  1,  1,  0,  0,  1,  0,  0,  1,  1,  1,  1,  1,  0,  0,  0, 
     0,  9,  1,  1,  1,  1,  1,  0,  0,  0,  0,  1,  1,  1,  1,  0, 
     0,  1,  1,  0,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[16384];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  // private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  // private boolean yy_atBOL;

  /** yy_atEOF == true <=> the scanner has returned a value for EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
	private int fTokenCount = 0;
 
	// required holders for white-space compacting
	private boolean fShouldLoadBuffered = false;
	private String fBufferedContext = null;
	private int fBufferedStart = 1;
	private int fBufferedLength = 0;
	private ContextRegionContainer fBufferedEmbeddedContainer = null;
	private String f_context = null;

	// state stack for handling embedded regions
	private IntStack fStateStack = new IntStack();
	// a "hint" as to what an embedded region should be evaluated
	private String fEmbeddedHint = UNDEFINED;
	// a "hint" as to what state to enter once an embedded region has
	//   been completed
	private int fEmbeddedPostState = YYINITIAL;
	
	// the container used to create embedded regions
	private ContextRegionContainer fEmbeddedContainer = null;
	private static final String PROXY_CONTEXT = "PROXY_CONTEXT";

	private String context = null;
	private int start = 0;
	private int textLength = 0;
	private int length = 0;

	// offset for tracking position specific block tags
	private int fOffset = 0;
	
	// the name of the current tag being opened
	private String fCurrentTagName = null;

	// the name of the current tag inside of an embedded region
	private String internalTagName = null;
	private String internalContext = null;

	// the list of tag name BlockMarkers
	private List fBlockMarkers = new ArrayList(0);
	private List fNestablePrefixes = new ArrayList(1);
	
	// where the last internal container block was found
	private int fLastInternalBlockStart = -1;

	// required to not seek text blocks on an end tag
	private boolean fIsBlockingEnabled = false;
	private boolean fIsCaseSensitiveBlocking = true;

	private static final boolean fForbidJSP = false;
	
	private int fELlevel = 0;

	private JSPParserRegionFactory fRegionFactory = new JSPParserRegionFactory();

	// Is the embedded tag a JSP tag
	private boolean fEmbeddedTag = false;
	// Is the non-embedded tag a JSP tag
	private boolean fContainerTag = false;
	// Is the tokenizer in a non-embedded tag (between < and >)
	private boolean fInTagContainer = false;
	// Is the tokenizer in an embedded tag (between < and >)
	private boolean fInTagEmbedded = false;

	/**
	 * user method 
	 */
	public final void addBlockMarker(BlockMarker marker) {
		if(containsTagName(marker.getTagName()))
			return;
		fBlockMarkers.add(marker);
	}
	/**
	 * user method
	 */
	public final void addNestablePrefix(TagMarker marker) {
		fNestablePrefixes.add(marker);
	}
	/* user method */
	public List getNestablePrefixes() {
		return fNestablePrefixes;
	}
	/**
	 * user method
	 */
	private boolean isNestable(String tagName) {
		//Iterator blocks = fNestablePrefixes.iterator();
		//while(blocks.hasNext()) {
		//	TagMarker marker = (TagMarker)blocks.next();
		//	String markerName = marker.getTagName();
		//	if(tagName.length() > markerName.length() + 1 && tagName.startsWith(markerName) && tagName.charAt(markerName.length()) == ':') {
		//		return marker.isGlobal() || getOffset() >= marker.getMarker().getStart();
		//	}
		//}
		//return false;
		return true;
	}
	/**
	 * user method 
	 */
	public final void removeNestablePrefix(String name) {
		if (fNestablePrefixes != null) {
			Iterator nestables = fNestablePrefixes.iterator();
			while (nestables.hasNext()) {
				if (((TagMarker) nestables.next()).getTagName().equalsIgnoreCase(name))
					nestables.remove();
			}
		}
	}
	/**
	 * user method 
	 */
	public final void removeBlockMarker(BlockMarker marker) {
		fBlockMarkers.remove(marker);
	}
	/**
	 * user method 
	 */
	public final void removeBlockMarker(String tagname) {
		if (fBlockMarkers != null) {
			Iterator blocks = fBlockMarkers.iterator();
			while (blocks.hasNext()) {
				if (((BlockMarker) blocks.next()).getTagName().equals(tagname))
					blocks.remove();
			}
		}
	}
	/* user method */
	private final void assembleEmbeddedTagSequence(String startType, String endTagName) {
		assembleEmbeddedContainer(startType, null, endTagName);
	}
	/* user method */
	private final void assembleEmbeddedContainer(String startType, String[] endTypes) {
		assembleEmbeddedContainer(startType, endTypes, null);
	}
	/* user method */
	private final void assembleEmbeddedContainer(String startType, String endType) {
		assembleEmbeddedContainer(startType, new String[]{endType}, null);
	}
	/**
	 *  user method 
	 * 
	 * Assembles an embedded container beginning with the given startType as
	 * the first ContextRegion within it and of the type fEmbeddedHint.  The
	 * endTypes[] array contains the context types that will cause a successful
	 * exit.  Use of the endTagName parameter alters this behavior to force an
	 * exit on an XML_TAG_CLOSE after seeing an XML_TAG_NAME whose significant
	 * text matches the endTagName String.  All contents in between are
	 * insignificant, and yes, this means comments are allowed inside.
	 **/
	private final void assembleEmbeddedContainer(String startType, String[] endTypes, String endTagName) {
		// the context of the region being added to the embedded container
		internalContext = startType;
		// keep track of where this container began; to provide relative indeces for the regions
		int containerStart = yychar;
		boolean notFinished = true;
		// keep track of where we seem to be so that the endTagName can be checked
		boolean isInEndTag = false;
		boolean isInFirstTag = true;
		// create the embedded container and setup its "type"
		if (fEmbeddedContainer == null) {
			fEmbeddedContainer = new ContextRegionContainer();
			fEmbeddedContainer.setType(fEmbeddedHint);
			fEmbeddedContainer.setStart(containerStart);
			// TODO: parent region needs to be set .... but not sure where to get it from 
			//		fEmbeddedContainer.setParent(parentRegion);
		}
		containerStart = fEmbeddedContainer.getStart();
		while (notFinished) {
			// add the region to the container
			if (internalContext != null && internalContext != PROXY_CONTEXT) {
				ITextRegion newToken = fRegionFactory.createToken(internalContext, yychar - containerStart, yylength(), yylength());
				fEmbeddedContainer.getRegions().add(newToken);
				fEmbeddedContainer.setLength(fEmbeddedContainer.getLength() + yylength());
				fEmbeddedContainer.setTextLength(fEmbeddedContainer.getTextLength() + yylength());
				// DW, 4/16/2003 token regions no longer have parents
				//newToken.setParent(fEmbeddedContainer);
			}
			try {
				// longscan determines whether to attempt a blockTagScan within the embedded container
				boolean longscan = false;
				// save the tokenizer state in case of a block tag scan
				int previousState = yystate();
				String previousCurrentTagName = fCurrentTagName;
				int previousPostState = fEmbeddedPostState;
				String previousEmbeddedHint = fEmbeddedHint;
				// determine if a block tag scan is necessary
				if (internalContext == XML_TAG_NAME) {
					internalTagName = yytext();
					if(!isNestable(internalTagName)) {
						internalTagName = null;
						// snagged a tag name we shouldn't have
						fEmbeddedPostState = ST_ABORT_EMBEDDED;
						notFinished = false;
					}
				}
				else if (internalContext == XML_TAG_OPEN || internalContext == XML_END_TAG_OPEN) {
					internalTagName = null;
				}
				// do upkeep for endTagName usage; must be here since the next token could be the close
				if (internalContext == XML_END_TAG_OPEN) {
					isInEndTag = true;
				} else if (internalContext == XML_TAG_CLOSE) {
					isInFirstTag = isInEndTag = false;
				} else {
				 	ITextRegionList embeddedRegions = fEmbeddedContainer.getRegions();
					if (embeddedRegions.size() > 2 && (embeddedRegions.get(embeddedRegions.size()-1)).getType() == XML_TAG_CLOSE && (embeddedRegions.get(embeddedRegions.size() - 3)).getType() == XML_TAG_OPEN && internalTagName != null) {
						if (containsTagName(internalTagName)) {
							longscan = true;
							yybegin(ST_BLOCK_TAG_SCAN);
						}
					}
				}
				if (longscan)
					fCurrentTagName = internalTagName;
				// read the next region and context
				internalContext = primGetNextToken();
				if (longscan) {
					// Returning from a block tag scan requires restoring some state variables
					// as well as handling the block region and setting up for normal scanning
					// inside the embedded container
					ITextRegion newToken = fRegionFactory.createToken(internalContext, yychar - containerStart, yylength(), yylength());
					fEmbeddedContainer.getRegions().add(newToken);
					fEmbeddedContainer.setLength(fEmbeddedContainer.getLength() + yylength());
					fEmbeddedContainer.setTextLength(fEmbeddedContainer.getTextLength() + yylength());
					// DW, 4/16/2003 token regions no longer have parents
					// newToken.setParent(fEmbeddedContainer);
					longscan = false;
					fEmbeddedPostState = previousPostState;
					fEmbeddedHint = previousEmbeddedHint;
					fCurrentTagName = previousCurrentTagName;
					yybegin(previousState);
					internalContext = primGetNextToken();
				}
			} catch (IOException e) {
				// primGetNextToken() calls may throw an IOException
				// catch and do nothing since the isEOF check below
				// will properly exit if the input was too short
			} catch (Exception f) {
				// some other exception happened; never should
				Logger.logException(f);
			}
			boolean isEndingType = yystate() == ST_ABORT_EMBEDDED;
			if(!isEndingType) {
				// check for ending context
				if (endTagName == null) {
					for (int i = 0; i < endTypes.length; i++) {
						isEndingType = isEndingType || (internalContext == endTypes[i]);
					}
				}
				else {
					isEndingType = ((isInEndTag && internalContext == XML_TAG_CLOSE) || (isInFirstTag && internalContext == XML_EMPTY_TAG_CLOSE)) && internalTagName != null && internalTagName.equals(endTagName);
				}
			}
			ITextRegionList embeddedList = fEmbeddedContainer.getRegions();
			notFinished = notFinished && ((!isEndingType) && !isEOF() && (endTagName != null || internalContext != UNDEFINED) && !(internalContext == PROXY_CONTEXT && (embeddedList.get(embeddedList.size()-1)).getType() == UNDEFINED));
		}
		// finish adding the last context
		if (internalContext != null && internalContext != PROXY_CONTEXT) {
			ITextRegion newToken = fRegionFactory.createToken(internalContext, yychar - containerStart, yylength(), yylength());
			fEmbeddedContainer.getRegions().add(newToken);
			// DW, 4/16/2003 token regions no longer have parents
			//newToken.setParent(fEmbeddedContainer);
			fEmbeddedContainer.setLength(yychar - containerStart + yylength());
			fEmbeddedContainer.setTextLength(yychar - containerStart + yylength());
		}
		yybegin(fEmbeddedPostState);
	}
	/* user method */
	public final boolean isCaseSensitiveBlocking() {
		return fIsCaseSensitiveBlocking;
	}
	/* user method */
	public final void setCaseSensitiveBlocking(boolean newValue) {
		fIsCaseSensitiveBlocking = newValue;
	}
	/* user method */
	public boolean getBlockMarkerAllowsJSP() {
		return getBlockMarkerAllowsJSP(fCurrentTagName);
	}
	/* user method */
	public boolean getBlockMarkerAllowsJSP(String name) {
		Iterator iterator = fBlockMarkers.iterator();
		while(iterator.hasNext()) {
			BlockMarker marker = (BlockMarker)iterator.next();
			boolean casesensitive = marker.isCaseSensitive();
			if(casesensitive && marker.getTagName().equals(name))
				return marker.allowsJSP();
			else if(!casesensitive && marker.getTagName().equalsIgnoreCase(name))
				return marker.allowsJSP();
		}
		return true;
	}
	/* user method */
	public boolean getBlockMarkerCaseSensitivity() {
		return getBlockMarkerCaseSensitivity(fCurrentTagName);
	}
	public boolean getBlockMarkerCaseSensitivity(String name) {
		Iterator iterator = fBlockMarkers.iterator();
		while(iterator.hasNext()) {
			BlockMarker marker = (BlockMarker)iterator.next();
			boolean casesensitive = marker.isCaseSensitive();
			if(casesensitive && marker.getTagName().equals(name))
				return casesensitive;
			else if(!casesensitive && marker.getTagName().equalsIgnoreCase(name))
				return casesensitive;
		}
		return true;
	}
	/* user method */
	public String getBlockMarkerContext() {
		return getBlockMarkerContext(fCurrentTagName);
	}
	/* user method */
	public String getBlockMarkerContext(String name) {
		Iterator iterator = fBlockMarkers.iterator();
		while(iterator.hasNext()) {
			BlockMarker marker = (BlockMarker)iterator.next();
			if(marker.getTagName().equals(name))
				return marker.getContext();
		}
		return BLOCK_TEXT;
	}
	/* user method */
	public List getBlockMarkers() {
		return fBlockMarkers;
	}
	/* user method */
	public final int getOffset() {
		return fOffset + yychar;
	}
	private final boolean isBlockMarker() {
		return isBlockMarker(fCurrentTagName);
	}
	private final boolean isBlockMarker(String tagName) {
		if (!fIsBlockingEnabled)
			return false;
		return containsTagName(tagName);
	}
	/**
	 * user method
	 */
	public final void beginBlockTagScan(String newTagName) {
		beginBlockMarkerScan(newTagName, BLOCK_TEXT);
	}
	/**
	 * user method
	 *
	 * Special tokenizer setup.  Allows tokenization to be initiated at the
	 * start of a text block within a "newTagName" tag.
	 *
	 * Example: 
	 *	Tokenizer toker = new Tokenizer();
	 *	toker.setCaseSensitiveBlocking(false);
	 *	toker.reset(new java.io.StringReader("afiuhqwkejhtasihgalkwhtq</scripter></scr></script>asgdasga"));
	 *	toker.beginBlockMarkerScan("script", BLOCK_TEXT);
	 *	toker.getRegions(); 
	 *
	 * Returns:
	 *	BLOCK_TEXT: 0-40
	 *	XML_END_TAG_OPEN: 41-42
	 *	XML_TAG_NAME: 43-48
	 *	XML_TAG_CLOSE: 49-49
	 *	XML_CONTENT: 50-57
	 *
	 */
	public final void beginBlockMarkerScan(String newTagName, String blockcontext) {
		yybegin(ST_BLOCK_TAG_SCAN);
		fCurrentTagName = newTagName;
	}

/**
 * Method doScan.
 * 
 * Returns a context region for all of the text from the current position upto the end of input or
 * to right *before* the first occurence of searchString
 * 
 * @param searchString - target string to search for ex.: "-->", "</tagname"
 * @param requireTailSeparator - whether the target must be immediately followed by whitespace or '>'
 * @param allowJSP - check for and allow for JSP markup <%%>
 * @param context - the context of the scanned region if non-zero length
 * @param exitState - the state to go to if the region was of non-zero length
 * @param abortState - the state to go to if the searchString was found immediately
 * @return String - the context found: the desired context on a non-zero length match, the abortContext on immediate success
 * @throws IOException
 */
private final String doScan(String searchString, boolean requireTailSeparator, boolean allowJSP, boolean allowCDATA, String searchContext, int exitState, int immediateFallbackState) throws IOException {
	boolean stillSearching = true;
	boolean wasBlockingEnabled = fIsBlockingEnabled;
	try {
		// Disable further block (probably)
		fIsBlockingEnabled = false;
		int searchStringLength = searchString.length();
		int n = 0;
		char lastCheckChar;
		int i;
		boolean same = false;
		// Check for JSP starts ("<%") if the tag is global like SCRIPT or STYLE
		boolean checkJSPs = allowJSP && !fForbidJSP;
		boolean checkedForJSPsOnce = !checkJSPs;
		boolean checkedJSPsAtStartOnce = false;
		
		// GSP keep track of bracket level so we can handle nested { } in GSP scriptlets
		// must check to see if we are already starting in a GSP content state
		int bracketLevel = yy_lexical_state == ST_GSP_CONTENT ? 1 : 0;
		if (yy_buffer[yy_currentPos] == '}') {
		    // we're already at the end of the scriptlet (ie- this is a one-char scriptlet)
		    bracketLevel--;
		}
		// GSP end

		while (stillSearching) {
			n = 0;
			// Ensure that enough data from the input exists to compare against the search String.
			n = yy_advance();
			while(n != YYEOF && yy_currentPos < searchStringLength)
				n = yy_advance();
	//		c = (char) n;
			// If the input was too short or we've exhausted the input, stop immediately.
			if (n == YYEOF && checkedForJSPsOnce) {
				stillSearching = false;
			}
			else {
			    
				/**
				 * Look for starting JSPs "<%"
				 */
				checkedForJSPsOnce = true;
				// 1) yy_currentPos - searchStringLength : There's at least searchStringLength of input available; once that's read, check for JSPs
				// ---
				// Look for a JSP beginning at current-searchStringLength; if so, backup and switch scanner states to handle it.
				// Ensure that we've not encountered a complete block (<%%>) that was *shorter* than the closeTagString and
				// thus found twice at current-targetLength [since the first scan would have come out this far anyway].
				if(checkJSPs && yy_currentPos > searchStringLength && yy_currentPos - searchStringLength != fLastInternalBlockStart && 
					 // check for JSP start
					((yy_buffer[yy_currentPos - searchStringLength] == '<' && yy_buffer[yy_currentPos - searchStringLength + 1] == '%') ||
					 // check for GSP start
					 (yy_buffer[yy_currentPos - searchStringLength] == '$' && yy_buffer[yy_currentPos - searchStringLength + 1] == '{')))  {
					fLastInternalBlockStart = yy_markedPos = yy_currentPos - searchStringLength;
					yy_currentPos = yy_markedPos + 1;
					int resumeState = yystate();
					yybegin(ST_BLOCK_TAG_INTERNAL_SCAN);
					if(yy_markedPos == yy_startRead) {
						String jspContext = primGetNextToken();
						yybegin(resumeState);
						return jspContext;
					}
					return searchContext;
				}
				// 2) yy_currentPos - jspstarter.length : There's not searchStringLength of input available; check for a JSP 2 spots back in what we could read
				// ---
				// Look for a JSP beginning at the current position; this case wouldn't be handled by the preceding section
				// since it relies upon *having* closeTagStringLength amount of input to work as designed.  Must be sure we don't
				// spill over the end of the buffer while checking.
				else if(checkJSPs && yy_startRead != fLastInternalBlockStart && yy_currentPos > 0 && yy_currentPos < yy_buffer.length - 1 &&
 					   // check for JSP start
						((yy_buffer[yy_currentPos - 1] == '<' && yy_buffer[yy_currentPos] == '%') ||
						 // check for GSP start
						 (yy_buffer[yy_currentPos - 1] == '$' && yy_buffer[yy_currentPos] == '{'))) {
					fLastInternalBlockStart = yy_markedPos = yy_currentPos - 1;
					yy_currentPos = yy_markedPos + 1;
					int resumeState = yystate();
					yybegin(ST_BLOCK_TAG_INTERNAL_SCAN);
					if(yy_markedPos == yy_startRead) {
						String jspContext = primGetNextToken();
						yybegin(resumeState);
						return jspContext;
					}
					return searchContext;
				}
				// 3) yy_currentPos..(yy_currentPos+jspStartlength-1) : Check at the start of the block one time
				// ---
				// Look for a JSP beginning immediately in the block area; this case wouldn't be handled by the preceding section
				// since it relies upon yy_currentPos equaling exactly the previous end +1 to work as designed.
				else if(checkJSPs && !checkedJSPsAtStartOnce && yy_startRead != fLastInternalBlockStart && yy_startRead > 0 &&
						yy_startRead < yy_buffer.length - 1 && 
 					   // check for JSP start
						((yy_buffer[yy_startRead] == '<' && yy_buffer[yy_startRead + 1] == '%') ||
 					   // check for GSP start
						 (yy_buffer[yy_startRead] == '$' && yy_buffer[yy_startRead + 1] == '{'))) {
					checkedJSPsAtStartOnce = true;
					fLastInternalBlockStart = yy_markedPos = yy_startRead;
					yy_currentPos = yy_markedPos + 1;
					int resumeState = yystate();
					yybegin(ST_BLOCK_TAG_INTERNAL_SCAN);
					if(yy_markedPos == yy_startRead) {
						String jspContext = primGetNextToken();
						yybegin(resumeState);
						return jspContext;
					}
					return searchContext;
				}
	
	
				/**
				 * Look for starting CDATA "<![CDATA["
				 */
				// 1) yy_currentPos - searchStringLength: There's at least searchStringLength of input available; once that's read, check for CDATA
				// ---
				// Look for a CDATA beginning at current-searchStringLength; if so, backup and switch scanner states to handle it.
				// Ensure that we've not encountered a complete block (<[!CDATA[]]>) that was *shorter* than the closeTagString and
				// thus found twice at current-targetLength [since the first scan would have come out this far anyway].
	/*			if(checkCDATA && yy_currentPos > searchStringLength && yy_currentPos + searchStringLength < yy_buffer.length && yy_currentPos - searchStringLength != fLastInternalBlockStart && 
					charsMatch(cdataStarter, yy_buffer, 0, yy_currentPos - searchStringLength)) {
					fLastInternalBlockStart = yy_markedPos = yy_currentPos - searchStringLength;
					yy_currentPos = yy_markedPos + 1;
					int resumeState = yystate();
					// go to a state where CDATA can be found
					if (fEmbeddedContainer == null) {
						fEmbeddedContainer = new ContextRegionContainer();
						fEmbeddedContainer.setType(searchContext);
						fEmbeddedContainer.setStart(yychar);
					}
					ITextRegion newToken = fRegionFactory.createToken(searchContext, yychar, yylength(), yylength());
					fEmbeddedContainer.getRegions().add(newToken);
					fEmbeddedContainer.setLength(fEmbeddedContainer.getLength() + yylength());
					fEmbeddedContainer.setTextLength(fEmbeddedContainer.getTextLength() + yylength());
					yybegin(YYINITIAL);
					String context = primGetNextToken();
					if(context.equals(XMLRegionContexts.XML_CDATA_OPEN)) {
						assembleEmbeddedContainer(XMLRegionContexts.XML_CDATA_OPEN, XMLRegionContexts.XML_CDATA_CLOSE);
					}
					yybegin(resumeState);
					return searchContext;
				}
	*//*
				// 2) yy_currentPos - cdataStarter.length: There's not searchStringLength of input available; check for a CDATA right here spots back in what we could read
				// ---
				// Look for a JSP beginning at the current position; this case wouldn't be handled by the preceding section
				// since it relies upon *having* closeTagStringLength amount of input to work as designed.  Must be sure we don't
				// spill over the end of the buffer while checking.
				else if(checkCDATA && yy_startRead != fLastInternalBlockStart && yy_currentPos > 0 && yy_currentPos < yy_buffer.length - 1 &&
						yy_buffer[yy_currentPos - 1] == '<' && yy_buffer[yy_currentPos] == '%') {
					fLastInternalBlockStart = yy_markedPos = yy_currentPos - 1;
					yy_currentPos = yy_markedPos + 1;
					int resumeState = yystate();
					yybegin(ST_BLOCK_TAG_INTERNAL_SCAN);
					if(yy_markedPos == yy_startRead) {
						String jspContext = primGetNextToken();
						yybegin(resumeState);
						return jspContext;
					}
					return searchContext;
				}
				// 3) yy_currentPos : Check at the start of the block one time
				// ---
				// Look for a JSP beginning immediately in the block area; this case wouldn't be handled by the preceding section
				// since it relies upon yy_currentPos equaling exactly the previous end +1 to work as designed.
				else if(checkCDATA && !checkedForCDATAOnce && yy_startRead != fLastInternalBlockStart && yy_startRead > 0 &&
						yy_startRead < yy_buffer.length - 1 && yy_buffer[yy_startRead] == '<' && yy_buffer[yy_startRead + 1] == '%') {
					checkedForCDATAOnce = true;
					fLastInternalBlockStart = yy_markedPos = yy_startRead;
					yy_currentPos = yy_markedPos + 1;
					int resumeState = yystate();
					yybegin(ST_BLOCK_TAG_INTERNAL_SCAN);
					if(yy_markedPos == yy_startRead) {
						String jspContext = primGetNextToken();
						yybegin(resumeState);
						return jspContext;
					}
					return searchContext;
				}
	*/
				// Check the characters in the target versus the last targetLength characters read from the buffer
				// and see if it matches
				if (n == YYEOF) {
					stillSearching = false;
				}
				else {
					same = true;
					// safety check for array accesses
					if(yy_currentPos >= searchStringLength && yy_currentPos <= yy_buffer.length) {
						for(i = 0; i < searchStringLength && same; i++) {
							if(fIsCaseSensitiveBlocking)
								same = yy_buffer[i + yy_currentPos - searchStringLength] == searchString.charAt(i);
							else
								same = Character.toLowerCase(yy_buffer[i + yy_currentPos - searchStringLength]) == Character.toLowerCase(searchString.charAt(i));
						}
					}
					// safety check failed; no match is possible right now
					else {
						same = false;
					}
				}
				if (same && requireTailSeparator && yy_currentPos < yy_buffer.length) {
					// Additional check for close tags to ensure that targetString="</script" doesn't match
					// "</scriptS"
					lastCheckChar = yy_buffer[yy_currentPos];
					// Succeed on "</script>" and "</script "
					if(lastCheckChar == '>' || Character.isWhitespace(lastCheckChar))
						stillSearching = false;
				}
				else {
					stillSearching = 
					    bracketLevel > 0 || // GSP ensure brackets have been closed
					    !same || (yy_currentPos < yy_startRead + searchStringLength);
				}
			}
			
			
            // GSP keep track of bracket level
            if (yy_buffer[yy_currentPos] == '{') {
                bracketLevel++;
            } else if (yy_buffer[yy_currentPos] == '}') {
                bracketLevel--;
            }
            // GSP end

		}
		if (n != YYEOF || same) {
			// We've stopped short of the end or definitely found a match
			yy_markedPos = yy_currentPos - searchStringLength;
			yy_currentPos = yy_markedPos + 1;
			// If the searchString occurs at the very beginning of what would have
			// been a Block, resume scanning normally immediately
			if (yy_markedPos == yy_startRead) {
				yybegin(immediateFallbackState);
				return primGetNextToken();
			}
		}
		else {
			// We ran through the rest of the input
			yy_markedPos = yy_currentPos;
			yy_currentPos++;
		}
		yybegin(exitState);
		// If the ending occurs at the very beginning of what would have
		// been a Block, resume scanning normally immediately
		if(yy_markedPos == yy_startRead)
		    return primGetNextToken();
		return searchContext;
	}
	finally {
		fIsBlockingEnabled = wasBlockingEnabled;
	}
}
/**
 * user method 
 * does a lookahead for the current tag name
 */
private final String doBlockTagScan() throws IOException {
	fIsCaseSensitiveBlocking = getBlockMarkerCaseSensitivity();
	return doScan("</" + fCurrentTagName, true, getBlockMarkerAllowsJSP(), true, getBlockMarkerContext(fCurrentTagName), YYINITIAL, YYINITIAL);
}
	/**
	 * user method
	 *
	 * Converts the raw context String returned by the primGetNextToken()
	 * method into a full ITextRegion by pulling in values for the
	 * current offset within the scanning text.
	 *
	 * Returns null when EOF is encountered and attaches intermittently
	 * discovered whitespace onto the end of useful regions.
	 *
	 * Note that this algorithm caches the token following the one being returned
	 * so that whitespace can be collapsed.
	 */
	public final ITextRegion getNextToken() throws IOException {
		fEmbeddedContainer = null;
		// load the starting non-whitespace token (assume that it is so)
		if (fShouldLoadBuffered) {
			if (fBufferedEmbeddedContainer != null) {
				ITextRegion container = fBufferedEmbeddedContainer;
				fBufferedEmbeddedContainer = null;
				fShouldLoadBuffered = false;
				return container;
			}
			context = fBufferedContext;
			start = fBufferedStart;
			textLength = length = fBufferedLength;
			fShouldLoadBuffered = false;
		} else {
			context = primGetNextToken();
			if (context == PROXY_CONTEXT) {
				return fEmbeddedContainer;
			} else if (context == XML_TAG_NAME || f_context == JSP_ROOT_TAG_NAME || f_context == JSP_DIRECTIVE_NAME) {
				if(containsTagName(yy_buffer, yy_startRead, yy_markedPos-yy_startRead))
					fCurrentTagName = yytext();
				else
					fCurrentTagName = null;
			} else if (context == XML_TAG_OPEN) {
				fIsBlockingEnabled = true;
			} else if (context == XML_END_TAG_OPEN) {
				fIsBlockingEnabled = false;
			}
			start = yychar;
			textLength = length = yylength();
			if (yy_atEOF) {
				fTokenCount++;
				return null;
			}
		}
		// store the next token
		f_context = primGetNextToken();
		if (f_context == PROXY_CONTEXT) {
			fBufferedEmbeddedContainer = fEmbeddedContainer;
			fShouldLoadBuffered = true;
		} else if (f_context == XML_TAG_NAME || f_context == JSP_ROOT_TAG_NAME || f_context == JSP_DIRECTIVE_NAME) {
			if(containsTagName(yy_buffer, yy_startRead, yy_markedPos-yy_startRead))
				fCurrentTagName = yytext();
			else
				fCurrentTagName = null;
		} else if (f_context == XML_TAG_OPEN) {
			fIsBlockingEnabled = true;
		} else if (f_context == XML_END_TAG_OPEN) {
			fIsBlockingEnabled = false;
		}
		fBufferedContext = f_context;
		fBufferedStart = yychar;
		fBufferedLength = yylength();
		fShouldLoadBuffered = true;
		if (fBufferedContext == WHITE_SPACE) {
			fShouldLoadBuffered = false;
			length += fBufferedLength;
		}
		if (context == null) {
			// EOF
			if (Debug.debugTokenizer) {
				System.out.println(getClass().getName() + " discovered " + fTokenCount + " tokens."); //$NON-NLS-2$//$NON-NLS-1$
			}
			return null;
		}
		fTokenCount++;
		return fRegionFactory.createToken(context, start, textLength, length, null, fCurrentTagName);
	}
	/* user method */
	public GSPTokenizer(){
		super();
	}
	/* user method */
	public GSPTokenizer(char[] charArray){
			this(new CharArrayReader(charArray));
	}
	/* user method */
	public void reset(char[] charArray) {
		reset(new CharArrayReader(charArray), 0);
	}
	/* user method */
	public void reset(char[] charArray, int newOffset) {
		reset(new CharArrayReader(charArray), newOffset);
	}
	/* user method */
	public void reset(java.io.InputStream in) {
		reset(new java.io.InputStreamReader(in), 0);
	}
	/* user method */
	public void reset(java.io.InputStream in, int newOffset) {
		reset(new java.io.InputStreamReader(in), newOffset);
	}
	/* user method */
	public void reset(java.io.Reader in) {
		reset(in, 0);
	}
	/**
	 * user method *
	 *
	 * Reset internal counters and vars to "newly created" values, in the hopes
	 * that resetting a pre-existing tokenizer is faster than creating a new one.
	 *
	 * This method contains code blocks that were essentially duplicated from the
	 * <em>generated</em> output of this specification before this method was
	 * added.  Those code blocks were under the above copyright.
	 */
	public void reset(java.io.Reader in, int newOffset) {
		if (Debug.debugTokenizer) {
			System.out.println("resetting tokenizer");//$NON-NLS-1$
		}
		fOffset = newOffset;
	
		/* the input device */
		yy_reader = in;
	
		/* the current state of the DFA */
		yy_state = 0;
	
		/* the current lexical state */
		yy_lexical_state = YYINITIAL;
	
		/* this buffer contains the current text to be matched and is
		the source of the yytext() string */
		java.util.Arrays.fill(yy_buffer, (char)0);
	
		/* the textposition at the last accepting state */
		yy_markedPos = 0;
	
		/* the textposition at the last state to be included in yytext */
		yy_pushbackPos = 0;
	
		/* the current text position in the buffer */
		yy_currentPos = 0;
	
		/* startRead marks the beginning of the yytext() string in the buffer */
		yy_startRead = 0;
	
		/** 
		 * endRead marks the last character in the buffer, that has been read
		 * from input 
		 */
		yy_endRead = 0;
	
		/* number of newlines encountered up to the start of the matched text */
		yyline = 0;
	
		/* the number of characters up to the start of the matched text */
		yychar = 0;
	
		/* yy_atEOF == true <=> the scanner has returned a value for EOF */
		yy_atEOF = false;
	
		/* denotes if the user-EOF-code has already been executed */
		yy_eof_done = false;
	
	
		/* user vars: */
		fTokenCount = 0;
	 
		fShouldLoadBuffered = false;
		fBufferedContext = null;
		fBufferedStart = 1;
		fBufferedLength = 0;
		fStateStack = new IntStack();
	
		fLastInternalBlockStart = -1;
	
		context = null;
		start = 0;
		textLength = 0;
		length = 0;
	
		fEmbeddedContainer = null;
		
		fELlevel = 0;
	}
	/**
	 * user method
	 *
	 */
	public BlockTokenizer newInstance() {
		GSPTokenizer newInstance = new GSPTokenizer();
		// global tagmarkers can be shared; they have no state and 
		// are never destroyed (e.g. 'release')
		for(int i = 0; i < fBlockMarkers.size(); i++) {
			BlockMarker blockMarker = (BlockMarker) fBlockMarkers.get(i);
			if(blockMarker.isGlobal())
				newInstance.addBlockMarker(blockMarker);
		}
		for(int i = 0; i < fNestablePrefixes.size(); i++) {
			TagMarker marker = (TagMarker) fNestablePrefixes.get(i);
			if(marker.isGlobal())
				newInstance.addNestablePrefix(marker);
		}
		return newInstance;
	}
	/* user method */
	private final String scanXMLCommentText() throws IOException {
		// Scan for '-->' and return the text up to that point as
		//   XML_COMMENT_TEXT unless the string occurs IMMEDIATELY, in which
		//  case change to the ST_XML_COMMENT_END state and return the next
		//  context as usual.
		return doScan("-->", false, true, true, XML_COMMENT_TEXT, ST_XML_COMMENT_END, ST_XML_COMMENT_END);
	}
	/* user method */
	private final String scanJSPCommentText() throws IOException {
		// Scan for '--%>' and return the text up to that point as
		//   JSP_COMMENT_TEXT unless the string occurs IMMEDIATELY, in which
		//  case change to the ST_JSP_COMMENT_END state and return the next
		//  context as usual.
		return doScan("--%>", false, false, true, JSP_COMMENT_TEXT, ST_JSP_COMMENT_END, ST_JSP_COMMENT_END);
	}
	
	/* user method */
	private boolean isJspTag() {
		return (fContainerTag && fEmbeddedContainer != null) || (fContainerTag && fInTagContainer) || (fEmbeddedTag && fInTagEmbedded);
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public GSPTokenizer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public GSPTokenizer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the unpacked transition table
   */
  private static int [] yy_unpack(String packed) {
    int [] trans = new int[31666];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 8956) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return trans;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1376) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Gets the next input character.
   *
   * @return      the next character of the input stream, EOF if the
   *              end of the stream is reached.
   * @exception   IOException  if any I/O-Error occurs
   */
  private int yy_advance() throws java.io.IOException {

    /* standard case */
    if (yy_currentPos < yy_endRead) return yy_buffer[yy_currentPos++];

    /* if the eof is reached, we don't need to work hard */ 
    if (yy_atEOF) return YYEOF;

    /* otherwise: need to refill the buffer */

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if ( numRead == -1 ) return YYEOF;

    yy_endRead+= numRead;

    return yy_buffer[yy_currentPos++];
  }

    
  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */
    yy_reader.close();
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }

  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }

  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning - from the SED JFlex skeleton
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    try {
      Logger.log(Logger.ERROR, YY_ERROR_MSG[errorCode]);
    }
    catch (ArrayIndexOutOfBoundsException e) {
      Logger.log(Logger.ERROR, YY_ERROR_MSG[YY_UNKNOWN_ERROR]);
    }
    // DO NOT EXIT the VM on an error
    // System.exit(1);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  void yypushback(int number) {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }

	/**
	 * user method - skeleton.sed
	 */
	protected final boolean containsTagName(char[] markerTagName, int offset, int tagnameLength) {
		for(int j = 0; j < fBlockMarkers.size(); j++) {
			BlockMarker marker = (BlockMarker)fBlockMarkers.get(j);
			if(marker.getTagName().length() == tagnameLength) {
				boolean matchesSoFar = true;
				for(int i = 0; i < tagnameLength && matchesSoFar; i++) {
					if(marker.isCaseSensitive()) {
						if(marker.getTagName().charAt(i) != markerTagName[i + offset])
							matchesSoFar = false;
					}
					else {
						if(Character.toLowerCase(marker.getTagName().charAt(i)) != Character.toLowerCase(markerTagName[i + offset]))
							matchesSoFar = false;
					}
				}
				if(matchesSoFar)
					return true;
			}
		}
		return false;
	}

	/**
	 * user method - skeleton.sed
	 *
	 * Return ALL of the regions scannable within the remaining text
	 * Note: for verification use
	 */
	public final List getRegions() {
		List tokens = new ArrayList();
		ITextRegion region = null;
		try {
			region = getNextToken();
			while(region != null) {
				if (region != null) {
					tokens.add(region);
				}
				region = getNextToken();
			}
		}
		catch (StackOverflowError e) {
			Logger.logException(getClass().getName()+": input could not be tokenized correctly at position " + getOffset(), e);//$NON-NLS-1$
			throw e;
		}
		catch (Exception e) {
			// Since this is convenience method and NOT the recommended 
			// way of getting tokens, many errors are simply hidden
			Logger.logException("Exception not handled retrieving regions: " + e.getLocalizedMessage(), e);//$NON-NLS-1$
		}
		return tokens;
	}
	/**
	 * user method - skeleton.sed
	 */
	private final void dump(String s) {
		if (Debug.debugTokenizer) {
			System.out.println(s + " (" + yychar + "-" + //$NON-NLS-2$//$NON-NLS-1$
				(yylength() + yychar) + "):\'" +//$NON-NLS-1$
					StringUtils.escape(yytext()) + "\'");//$NON-NLS-1$
		}
	}
	/* user method  - skeleton.sed */
	public final boolean isEOF() {
		return yy_atEOF;
	}
/* user method - skeleton.sed */
protected final boolean containsTagName(String markerTagName) {
	Iterator blocks = fBlockMarkers.iterator();
	while(blocks.hasNext()) {
		BlockMarker marker = (BlockMarker)blocks.next();
		if(marker.isCaseSensitive()) {
			if(marker.getTagName().equals(markerTagName))
				return true;
		}
		else {
			if(marker.getTagName().equalsIgnoreCase(markerTagName))
				return true;
		}
	}
	return false;
}

  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() {
    if (!yy_eof_done) {
      yy_eof_done = true;
    // do nothing, this is the downstream parser's job

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public String primGetNextToken() throws java.io.IOException {
    int yy_input;
    int yy_action;

    yy_pushbackPos = -1;
    boolean yy_was_pushback;

    while (true) {

      yychar+= yylength();

      boolean yy_counted = false;
      for (yy_currentPos = yy_startRead; yy_currentPos < yy_markedPos;
                                                      yy_currentPos++) {
        switch (yy_buffer[yy_currentPos]) {
        case '\r':
          yyline++;
          yy_counted = true;
          break;
        case '\n':
          if (yy_counted)
            yy_counted = false;
          else {
            yyline++;
          }
          break;
        default:
          yy_counted = false;
        }
      }

      if (yy_counted) {
        if ( yy_advance() == '\n' ) yyline--;
        if ( !yy_atEOF ) yy_currentPos--;
      }

      yy_action = -1;

      yy_currentPos = yy_startRead = yy_markedPos;

      yy_state = yy_lexical_state;

      yy_was_pushback = false;

      yy_forAction: {
        while (true) {
    
          yy_input = yy_advance();

          if ( yy_input == YYEOF ) break yy_forAction;

          int yy_next = yytrans[ yy_rowMap[yy_state] + yycmap[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = YY_ATTRIBUTE[yy_state];
          if ( (yy_attributes & 2) > 0 )
            yy_pushbackPos = yy_currentPos;

          if ( (yy_attributes & 1) > 0 ) {
            yy_was_pushback = (yy_attributes & 4) > 0;
            yy_action = yy_state; 
            yy_markedPos = yy_currentPos; 
            if ( (yy_attributes & 8) > 0 ) break yy_forAction;
          }

        }
      }

      if (yy_was_pushback)
        yy_markedPos = yy_pushbackPos;

      switch (yy_action) {    

        case 130: 
        case 135: 
        case 289: 
        case 295: 
        case 418: 
        case 495: 
          {  /* only allow for non-JSP tags for this does not obey JSP quoting rules */
	if(Debug.debugTokenizer)
		dump("attr value");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
        yybegin(ST_XML_ATTRIBUTE_NAME);
        return XML_TAG_ATTRIBUTE_VALUE;
 }
        case 646: break;
        case 182: 
        case 187: 
        case 354: 
        case 360: 
        case 452: 
        case 454: 
        case 456: 
        case 510: 
          {  /* JSP attribute values have escape semantics */
	if(Debug.debugTokenizer)
		dump("jsp attr value");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
	yybegin(ST_XML_ATTRIBUTE_NAME);
	return XML_TAG_ATTRIBUTE_VALUE;
 }
        case 647: break;
        case 613: 
        case 618: 
        case 625: 
        case 630: 
          { 
	if(Debug.debugTokenizer)
		dump("jsp directive tag name");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
        yybegin(ST_XML_ATTRIBUTE_NAME);
        return JSP_DIRECTIVE_NAME;
 }
        case 648: break;
        case 587: 
          { 
	if(Debug.debugTokenizer)
		dump("XSL processing instruction target");//$NON-NLS-1$
	fEmbeddedPostState = ST_XML_EQUALS;
        yybegin(ST_XML_PI_ATTRIBUTE_NAME);
        return XML_TAG_NAME;
 }
        case 649: break;
        case 572: 
        case 575: 
        case 576: 
        case 577: 
        case 578: 
          { 
	if(Debug.debugTokenizer)
		dump("\nCDATA start");//$NON-NLS-1$
	fStateStack.push(yystate());
	yybegin(ST_CDATA_TEXT);
	return XML_CDATA_OPEN;
 }
        case 650: break;
        case 566: 
          { 
	if(Debug.debugTokenizer)
		dump("jsp:root tag name");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
        yybegin(ST_XML_ATTRIBUTE_NAME);
        return JSP_ROOT_TAG_NAME;
 }
        case 651: break;
        case 559: 
          { 
	if(Debug.debugTokenizer)
		dump("element");//$NON-NLS-1$
	yybegin(ST_XML_ELEMENT_DECLARATION);
	return XML_ELEMENT_DECLARATION;
 }
        case 652: break;
        case 558: 
          { 
	if(Debug.debugTokenizer)
		dump("attlist");//$NON-NLS-1$
	yybegin(ST_XML_ATTLIST_DECLARATION);
	return XML_ATTLIST_DECLARATION;
 }
        case 653: break;
        case 557: 
          { 
	if(Debug.debugTokenizer)
		dump("doctype");//$NON-NLS-1$
	yybegin(ST_XML_DOCTYPE_DECLARATION);
	return XML_DOCTYPE_DECLARATION;
 }
        case 654: break;
        case 546: 
          { 
	if(Debug.debugTokenizer)
		dump("doctype external id");//$NON-NLS-1$
	fEmbeddedHint = XML_DOCTYPE_EXTERNAL_ID_PUBREF;
	yybegin(ST_XML_DOCTYPE_ID_PUBLIC);
	return XML_DOCTYPE_EXTERNAL_ID_PUBLIC;
 }
        case 655: break;
        case 545: 
          { 
	if(Debug.debugTokenizer)
		dump("doctype external id");//$NON-NLS-1$
	fEmbeddedHint = XML_DOCTYPE_EXTERNAL_ID_SYSREF;
	yybegin(ST_XML_DOCTYPE_ID_SYSTEM);
	return XML_DOCTYPE_EXTERNAL_ID_SYSTEM;
 }
        case 656: break;
        case 539: 
          { 
	if(Debug.debugTokenizer)
		dump("DHTML processing instruction target");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
        yybegin(ST_DHTML_ATTRIBUTE_NAME);
        return XML_TAG_NAME;
 }
        case 657: break;
        case 518: 
        case 551: 
        case 552: 
          { 
	return JSP_VBL_QUOTED_CONTENT;
 }
        case 658: break;
        case 509: 
          { 
	if(Debug.debugTokenizer)
		dump("\nJSP comment close");//$NON-NLS-1$
	yybegin(YYINITIAL);
	return JSP_COMMENT_CLOSE;
 }
        case 659: break;
        case 496: 
          { 
	if (Debug.debugTokenizer) {
		System.out.println("begin embedded region: " + fEmbeddedHint+", el-unquoted");//$NON-NLS-1$
	}
	fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
	fStateStack.push(yystate());
	if(yylength() > 2)
		yypushback(yylength() -2);
	if(Debug.debugTokenizer)
		dump("VBL in attr value");//$NON-NLS-1$
	yybegin(ST_JSP_VBL);
	fELlevel++;
	assembleEmbeddedContainer(JSP_VBL_OPEN, new String[]{JSP_VBL_CLOSE});
	fStateStack.pop();
	yybegin(ST_XML_ATTRIBUTE_NAME);
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
	return PROXY_CONTEXT;
 }
        case 660: break;
        case 488: 
          { 
	if(Debug.debugTokenizer)
		dump("\nCharRef");//$NON-NLS-1$
	return XML_CHAR_REFERENCE;
 }
        case 661: break;
        case 485: 
          { 
	if(Debug.debugTokenizer)
		dump("\ncomment start");//$NON-NLS-1$
	fEmbeddedHint = XML_COMMENT_TEXT;
	fEmbeddedPostState = ST_XML_COMMENT;
	yybegin(ST_XML_COMMENT);
	return XML_COMMENT_OPEN;
 }
        case 662: break;
        case 484: 
        case 504: 
        case 507: 
        case 511: 
        case 512: 
        case 514: 
        case 516: 
        case 519: 
          { 
	/* JSP comment begun (anywhere)
	 * A consequence of the start anywhere possibility is that the
	 *  incoming state must be checked to see if it's erroneous
	 *  due to the order of precedence generated
	 */
	// begin sanity checks
	if(yystate() == ST_JSP_CONTENT) {
		// at the beginning?!
		yypushback(3);
		return JSP_CONTENT;
	}
	else if(yystate() == ST_BLOCK_TAG_SCAN) {
		yypushback(4);
		return doBlockTagScan();
	}
	else if(yystate() == ST_XML_COMMENT) {
		yypushback(4);
		return scanXMLCommentText();
	}
	else if(yystate() == ST_JSP_COMMENT) {
		yypushback(4);
		return scanJSPCommentText();
	}
	else if(yystate() == ST_BLOCK_TAG_INTERNAL_SCAN)  {
		yybegin(ST_JSP_COMMENT);
		assembleEmbeddedContainer(JSP_COMMENT_OPEN, JSP_COMMENT_CLOSE);
		if(yystate() == ST_BLOCK_TAG_INTERNAL_SCAN)
			yybegin(ST_BLOCK_TAG_SCAN);
		return PROXY_CONTEXT;
	}
	// finished sanity checks
	if(yystate()==YYINITIAL) {
		// the simple case, just a regular scriptlet out in content
		if(Debug.debugTokenizer)
			dump("\nJSP comment start");//$NON-NLS-1$
		yybegin(ST_JSP_COMMENT);
		return JSP_COMMENT_OPEN;
	}
	else {
		if (Debug.debugTokenizer) {
			System.out.println("begin embedded region: " + fEmbeddedHint+", jspCommentStart");//$NON-NLS-1$
		}
		if(Debug.debugTokenizer)
			dump("JSP comment start");//$NON-NLS-1$
		if(yystate() == ST_XML_ATTRIBUTE_VALUE_DQUOTED)
			fEmbeddedPostState = ST_XML_ATTRIBUTE_VALUE_DQUOTED;
		else if(yystate() == ST_XML_ATTRIBUTE_VALUE_SQUOTED)
			fEmbeddedPostState = ST_XML_ATTRIBUTE_VALUE_SQUOTED;
		else if(yystate() == ST_CDATA_TEXT) {
			fEmbeddedPostState = ST_CDATA_TEXT;
			fEmbeddedHint = XML_CDATA_TEXT;
		}
		yybegin(ST_JSP_COMMENT);
		// the comment container itself will act as comment text
		fEmbeddedHint = JSP_COMMENT_TEXT;
		assembleEmbeddedContainer(JSP_COMMENT_OPEN, JSP_COMMENT_CLOSE);
		if(yystate() == ST_BLOCK_TAG_INTERNAL_SCAN) {
			yybegin(ST_BLOCK_TAG_SCAN);
			return BLOCK_TEXT;
		}
		/*
		 * required help for successive embedded regions; mark this one as a
		 * comment so it will be otherwise ignored but preserved (which is why
		 * we can't use white-space)
		 */
		if(yystate() == ST_XML_TAG_NAME) {
			fEmbeddedHint = XML_TAG_NAME;
			fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
		}
		else if((yystate() == ST_XML_ATTRIBUTE_NAME || yystate() == ST_XML_EQUALS)) {
			fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
			fEmbeddedPostState = ST_XML_EQUALS;
		}
		else if(yystate() == ST_XML_ATTRIBUTE_VALUE) {
			fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
			fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
		}
		else if(yystate() == ST_JSP_ATTRIBUTE_VALUE) {
			fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
			fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
		}
		return PROXY_CONTEXT;
	}
 }
        case 663: break;
        case 402: 
        case 403: 
          { 
	if(Debug.debugTokenizer)
		dump("XML processing instruction target");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
        yybegin(ST_XML_PI_ATTRIBUTE_NAME);
        return XML_TAG_NAME;
 }
        case 664: break;
        case 401: 
          { 
	if(Debug.debugTokenizer)
		dump("comment end");//$NON-NLS-1$
	fEmbeddedHint = UNDEFINED;
	yybegin(YYINITIAL);
	return XML_COMMENT_CLOSE;
 }
        case 665: break;
        case 400: 
          { 
	if(Debug.debugTokenizer)
		dump("CDATA end");//$NON-NLS-1$
	yybegin(fStateStack.pop());
	return XML_CDATA_CLOSE;
 }
        case 666: break;
        case 399: 
          { 
	yybegin(ST_JSP_VBL);
	if(yylength() > 2)
		yypushback(yylength() - 2);
	fELlevel++;
	fEmbeddedHint = XML_CONTENT;
	fEmbeddedPostState = YYINITIAL;
	assembleEmbeddedContainer(JSP_VBL_OPEN, JSP_VBL_CLOSE);
	fEmbeddedHint = XML_CONTENT;
	yybegin(YYINITIAL);
	return PROXY_CONTEXT;
 }
        case 667: break;
        case 398: 
          { 
	if(Debug.debugTokenizer)
		dump("\nPEReference");//$NON-NLS-1$
	return XML_PE_REFERENCE;
 }
        case 668: break;
        case 395: 
          { 
	if(Debug.debugTokenizer)
		dump("\nEntityRef");//$NON-NLS-1$
	return XML_ENTITY_REFERENCE;
 }
        case 669: break;
        case 389: 
        case 439: 
        case 449: 
        case 461: 
        case 465: 
        case 470: 
        case 475: 
        case 481: 
          { 
	/* JSP expression begun (anywhere)
	 * A consequence of the start anywhere possibility is that the
	 *  incoming state must be checked to see if it's erroneous
	 *  due to the order of precedence generated
	 */
	// begin sanity checks
	if(yystate() == ST_JSP_CONTENT) {
		// at the beginning?!
		yypushback(2);
		return JSP_CONTENT;
	}
	else if(yystate() == ST_BLOCK_TAG_SCAN) {
		yypushback(3);
		return doBlockTagScan();
	}
	else if(yystate() == ST_XML_COMMENT) {
		yypushback(3);
		return scanXMLCommentText();
	}
	else if(yystate() == ST_JSP_COMMENT) {
		yypushback(3);
		return scanJSPCommentText();
	}
	// end sanity checks
	fStateStack.push(yystate());
	if(fStateStack.peek()==YYINITIAL) {
		// the simple case, just an expression out in content
		if(Debug.debugTokenizer)
			dump("\nJSP expression start");//$NON-NLS-1$
		yybegin(ST_JSP_CONTENT);
		return JSP_EXPRESSION_OPEN;
	}
	else {
		if (Debug.debugTokenizer) {
			System.out.println("begin embedded region: " + fEmbeddedHint+", jspExpressionStart");//$NON-NLS-1$
		}
		if(Debug.debugTokenizer)
			dump("JSP expression start");//$NON-NLS-1$
		if(yystate() == ST_XML_ATTRIBUTE_VALUE_DQUOTED)
			fEmbeddedPostState = ST_XML_ATTRIBUTE_VALUE_DQUOTED;
		else if(yystate() == ST_XML_ATTRIBUTE_VALUE_SQUOTED)
			fEmbeddedPostState = ST_XML_ATTRIBUTE_VALUE_SQUOTED;
		else if(yystate() == ST_CDATA_TEXT) {
			fEmbeddedPostState = ST_CDATA_TEXT;
			fEmbeddedHint = XML_CDATA_TEXT;
		}
		yybegin(ST_JSP_CONTENT);
		assembleEmbeddedContainer(JSP_EXPRESSION_OPEN, JSP_CLOSE);
		if(yystate() == ST_BLOCK_TAG_INTERNAL_SCAN) {
			yybegin(ST_BLOCK_TAG_SCAN);
			return BLOCK_TEXT;
		}
		// required help for successive embedded regions
		if(yystate() == ST_XML_TAG_NAME) {
			fEmbeddedHint = XML_TAG_NAME;
			fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
		}
		else if((yystate() == ST_XML_ATTRIBUTE_NAME || yystate() == ST_XML_EQUALS)) {
			fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
			fEmbeddedPostState = ST_XML_EQUALS;
		}
		else if(yystate() == ST_XML_ATTRIBUTE_VALUE) {
			fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
			fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
		}
		else if(yystate() == ST_JSP_ATTRIBUTE_VALUE) {
			fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
			fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
		}
		
		return PROXY_CONTEXT;
	}
 }
        case 670: break;
        case 388: 
        case 438: 
        case 448: 
        case 460: 
        case 464: 
        case 469: 
        case 474: 
        case 480: 
          { 
	/* JSP declaration begun (anywhere)
	 * A consequence of the start anywhere possibility is that the
	 *  incoming state must be checked to see if it's erroneous
	 *  due to the order of precedence generated
	 */
	// begin sanity checks
	if(yystate() == ST_JSP_CONTENT) {
		// at the beginning?!
		yypushback(2);
		return JSP_CONTENT;
	}
	else if(yystate() == ST_BLOCK_TAG_SCAN) {
		yypushback(3);
		return doBlockTagScan();
	}
	else if(yystate() == ST_XML_COMMENT) {
		yypushback(3);
		return scanXMLCommentText();
	}
	else if(yystate() == ST_JSP_COMMENT) {
		yypushback(3);
		return scanJSPCommentText();
	}
	// end sanity checks
	fStateStack.push(yystate());
	if(fStateStack.peek()==YYINITIAL) {
		// the simple case, just a declaration out in content
		if(Debug.debugTokenizer)
			dump("\nJSP declaration start");//$NON-NLS-1$
		yybegin(ST_JSP_CONTENT);
		return JSP_DECLARATION_OPEN;
	}
	else {
		if (Debug.debugTokenizer) {
			System.out.println("begin embedded region: " + fEmbeddedHint+", jspDeclarationStart");//$NON-NLS-1$
		}
		if(Debug.debugTokenizer)
			dump("JSP declaration start");//$NON-NLS-1$
		if(yystate() == ST_XML_ATTRIBUTE_VALUE_DQUOTED)
			fEmbeddedPostState = ST_XML_ATTRIBUTE_VALUE_DQUOTED;
		else if(yystate() == ST_XML_ATTRIBUTE_VALUE_SQUOTED)
			fEmbeddedPostState = ST_XML_ATTRIBUTE_VALUE_SQUOTED;
		else if(yystate() == ST_CDATA_TEXT) {
			fEmbeddedPostState = ST_CDATA_TEXT;
			fEmbeddedHint = XML_CDATA_TEXT;
		}
		yybegin(ST_JSP_CONTENT);
		assembleEmbeddedContainer(JSP_DECLARATION_OPEN, JSP_CLOSE);
		if(yystate() == ST_BLOCK_TAG_INTERNAL_SCAN) {
			yybegin(ST_BLOCK_TAG_SCAN);
			return BLOCK_TEXT;
		}
		// required help for successive embedded regions
		if(yystate() == ST_XML_TAG_NAME) {
			fEmbeddedHint = XML_TAG_NAME;
			fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
		}
		else if((yystate() == ST_XML_ATTRIBUTE_NAME || yystate() == ST_XML_EQUALS)) {
			fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
			fEmbeddedPostState = ST_XML_EQUALS;
		}
		else if(yystate() == ST_XML_ATTRIBUTE_VALUE) {
			fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
			fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
		}
		else if(yystate() == ST_JSP_ATTRIBUTE_VALUE) {
			fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
			fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
		}
		return PROXY_CONTEXT;
	}
 }
        case 671: break;
        case 387: 
        case 437: 
        case 447: 
        case 459: 
        case 463: 
        case 468: 
        case 473: 
        case 479: 
          { 
	/* JSP directive begun (anywhere)
	 * A consequence of the start anywhere possibility is that the
	 *  incoming state must be checked to see if it's erroneous
	 *  due to the order of precedence generated
	 */
	// begin sanity checks
	if(yystate() == ST_JSP_CONTENT) {
		// at the beginning?!
		yypushback(2);
		return JSP_CONTENT;
	}
	else if(yystate() == ST_BLOCK_TAG_SCAN) {
		yypushback(3);
		return doBlockTagScan();
	}
	else if(yystate() == ST_XML_COMMENT) {
		yypushback(3);
		return scanXMLCommentText();
	}
	else if(yystate() == ST_JSP_COMMENT) {
		yypushback(3);
		return scanJSPCommentText();
	}
	// end sanity checks
	fStateStack.push(yystate());
	if(fStateStack.peek()==YYINITIAL) {
		// the simple case, just a declaration out in content
		if(Debug.debugTokenizer)
			dump("\nJSP directive start");//$NON-NLS-1$
		yybegin(ST_JSP_DIRECTIVE_NAME);
		return JSP_DIRECTIVE_OPEN;
	}
	else {
		if (Debug.debugTokenizer) {
			System.out.println("begin embedded region: " + fEmbeddedHint+", jspDirectiveStart");//$NON-NLS-1$
		}
		if(Debug.debugTokenizer)
			dump("JSP declaration start");//$NON-NLS-1$
		if(yystate() == ST_XML_ATTRIBUTE_VALUE_DQUOTED)
			fEmbeddedPostState = ST_XML_ATTRIBUTE_VALUE_DQUOTED;
		else if(yystate() == ST_XML_ATTRIBUTE_VALUE_SQUOTED)
			fEmbeddedPostState = ST_XML_ATTRIBUTE_VALUE_SQUOTED;
		else if(yystate() == ST_CDATA_TEXT) {
			fEmbeddedPostState = ST_CDATA_TEXT;
			fEmbeddedHint = XML_CDATA_TEXT;
		}
		yybegin(ST_JSP_DIRECTIVE_NAME);
		assembleEmbeddedContainer(JSP_DIRECTIVE_OPEN, new String[]{JSP_DIRECTIVE_CLOSE, JSP_CLOSE});
		if(yystate() == ST_BLOCK_TAG_INTERNAL_SCAN) {
			yybegin(ST_BLOCK_TAG_SCAN);
			return BLOCK_TEXT;
		}
		// required help for successive embedded regions
		if(yystate() == ST_XML_TAG_NAME) {
			fEmbeddedHint = XML_TAG_NAME;
			fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
		}
		else if((yystate() == ST_XML_ATTRIBUTE_NAME || yystate() == ST_XML_EQUALS)) {
			fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
			fEmbeddedPostState = ST_XML_EQUALS;
		}
		else if(yystate() == ST_XML_ATTRIBUTE_VALUE) {
			fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
			fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
		}
		return PROXY_CONTEXT;
	}
 }
        case 672: break;
        case 374: 
          { 
	yybegin(ST_JSP_VBL_DQUOTES_END);
	return JSP_VBL_QUOTED_CONTENT;
 }
        case 673: break;
        case 369: 
          { 
	yybegin(ST_JSP_VBL_SQUOTES_END);
	return JSP_VBL_QUOTED_CONTENT;
 }
        case 674: break;
        case 367: 
          { 
	fELlevel++;
	if(fELlevel == 1) {
		return JSP_VBL_OPEN;
	}
 }
        case 675: break;
        case 364: 
          { 
	int enterState = yystate();
	yybegin(ST_JSP_DQUOTED_VBL);
	assembleEmbeddedContainer(JSP_VBL_OPEN, new String[]{JSP_VBL_CLOSE, XML_TAG_ATTRIBUTE_VALUE_DQUOTE, JSP_TAG_ATTRIBUTE_VALUE_DQUOTE});
	// abort early when an unescaped double quote is found in the VBL
	if(fEmbeddedContainer.getLastRegion().getType().equals(XML_TAG_ATTRIBUTE_VALUE_DQUOTE) || fEmbeddedContainer.getLastRegion().getType().equals(JSP_TAG_ATTRIBUTE_VALUE_DQUOTE)) {
		yybegin(ST_ABORT_EMBEDDED);
		fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
	}
	else {
		yybegin(enterState);
	}
	return PROXY_CONTEXT;
 }
        case 676: break;
        case 363: 
          { 
	int enterState = yystate();
	yybegin(ST_JSP_SQUOTED_VBL);
	assembleEmbeddedContainer(JSP_VBL_OPEN, new String[]{JSP_VBL_CLOSE, XML_TAG_ATTRIBUTE_VALUE_SQUOTE, JSP_TAG_ATTRIBUTE_VALUE_SQUOTE});
	// abort early when an unescaped single quote is found in the VBL
	if(fEmbeddedContainer.getLastRegion().getType().equals(XML_TAG_ATTRIBUTE_VALUE_SQUOTE) || fEmbeddedContainer.getLastRegion().getType().equals(JSP_TAG_ATTRIBUTE_VALUE_SQUOTE)) {
		yybegin(ST_ABORT_EMBEDDED);
		fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
	}
	else {
		yybegin(enterState);
	}
	return PROXY_CONTEXT;
 }
        case 677: break;
        case 361: 
          { 
	if (Debug.debugTokenizer) {
		System.out.println("begin embedded region: " + fEmbeddedHint+", genericEndTagOpen");//$NON-NLS-1$
	}
	int incomingState = yystate();
	fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
	if(Debug.debugTokenizer)
		dump("JSP attribute value start - end tag");//$NON-NLS-1$
	yybegin(ST_XML_TAG_NAME);
	assembleEmbeddedContainer(XML_END_TAG_OPEN, new String[]{XML_TAG_CLOSE,XML_EMPTY_TAG_CLOSE});
	if(yystate() != ST_ABORT_EMBEDDED)
        yybegin(incomingState);
	return PROXY_CONTEXT;
 }
        case 678: break;
        case 300: 
        case 315: 
        case 322: 
          { 
	return XML_DOCTYPE_INTERNAL_SUBSET;
 }
        case 679: break;
        case 287: 
          { 
	String tagName = yytext().substring(1);
	// pushback to just after the opening bracket
	yypushback(yylength() - 1);
	/*
	 * If this tag can not be nested or we're already searching for an
	 * attribute name, equals, or value, return immediately.
	 */
	if (!isNestable(tagName) || (!fStateStack.empty() && (fStateStack.peek() == ST_XML_ATTRIBUTE_NAME || fStateStack.peek() == ST_XML_EQUALS || fStateStack.peek() == ST_XML_ATTRIBUTE_VALUE || fStateStack.peek() == ST_JSP_ATTRIBUTE_VALUE))) {
		yybegin(ST_XML_TAG_NAME);
		return XML_TAG_OPEN;
	}
	if(Debug.debugTokenizer)
		dump("tag in place of attr value");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
	fStateStack.push(yystate());
	// embedded container should be looking for the name (again) next
	yybegin(ST_XML_TAG_NAME);
	assembleEmbeddedTagSequence(XML_TAG_OPEN, tagName); // ?
	fStateStack.pop();
	yybegin(ST_XML_ATTRIBUTE_NAME);
	return PROXY_CONTEXT;
 }
        case 680: break;
        case 131: 
          { 
	if (Debug.debugTokenizer) {
		System.out.println("begin embedded region: " + fEmbeddedHint+", unquoted genericTagOpen");//$NON-NLS-1$
	}
	fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
	fStateStack.push(yystate());
	if(Debug.debugTokenizer)
		dump("JSP tag embedded name start - start tag");//$NON-NLS-1$
	yybegin(ST_XML_TAG_NAME);
	assembleEmbeddedContainer(XML_TAG_OPEN, new String[]{XML_TAG_CLOSE,XML_EMPTY_TAG_CLOSE});
	fStateStack.pop();
        yybegin(ST_XML_ATTRIBUTE_NAME);
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
	return PROXY_CONTEXT;
 }
        case 681: break;
        case 129: 
          { 
	if(Debug.debugTokenizer)
		dump("equals");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
        yybegin(isJspTag() ? ST_JSP_ATTRIBUTE_VALUE : ST_XML_ATTRIBUTE_VALUE);
        return XML_TAG_ATTRIBUTE_EQUALS;
 }
        case 682: break;
        case 128: 
          { 
	if(Debug.debugTokenizer)
		dump("attr name");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
        yybegin(ST_XML_EQUALS);
        return XML_TAG_ATTRIBUTE_NAME;
 }
        case 683: break;
        case 124: 
        case 125: 
        case 126: 
        case 284: 
        case 415: 
        case 494: 
        case 524: 
        case 525: 
        case 540: 
        case 541: 
        case 555: 
        case 556: 
        case 567: 
        case 574: 
        case 580: 
        case 582: 
        case 584: 
        case 586: 
        case 590: 
        case 596: 
        case 597: 
        case 598: 
        case 599: 
        case 600: 
        case 606: 
        case 607: 
        case 608: 
        case 609: 
        case 610: 
        case 616: 
        case 617: 
        case 619: 
        case 620: 
        case 626: 
        case 627: 
        case 628: 
        case 629: 
        case 635: 
        case 636: 
        case 637: 
        case 638: 
        case 641: 
        case 642: 
        case 644: 
          { 
	if(Debug.debugTokenizer)
		dump("tag name");//$NON-NLS-1$
    String tagname = yytext();
    boolean jspTag = tagname.indexOf(':') != -1;
	if (fEmbeddedContainer != null) {
    	fEmbeddedTag = jspTag;
		fInTagEmbedded = true;
    }
	else {
		fContainerTag = jspTag;
		fInTagContainer = true;
	}
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
        yybegin(ST_XML_ATTRIBUTE_NAME);
        return XML_TAG_NAME;
 }
        case 684: break;
        case 122: 
          { 
	if(Debug.debugTokenizer)
		dump("tag close");//$NON-NLS-1$
	fEmbeddedHint = UNDEFINED;
	if(isBlockMarker()) {
		fEmbeddedHint = getBlockMarkerContext();
		fEmbeddedPostState = ST_BLOCK_TAG_SCAN;
        	yybegin(ST_BLOCK_TAG_SCAN);
	}
	else
        	yybegin(YYINITIAL);

	if (fEmbeddedContainer != null)
		fInTagEmbedded = false;
	else
		fInTagContainer = false;

	return XML_TAG_CLOSE;
 }
        case 685: break;
        case 119: 
          { 
	if(Debug.debugTokenizer)
		dump("GSP end");//$NON-NLS-1$
	if (Debug.debugTokenizer) {
		if(fStateStack.peek()!=YYINITIAL)
			System.out.println("end embedded region");//$NON-NLS-1$
	}
	yybegin(fStateStack.pop());
	return JSP_CLOSE;
 }
        case 686: break;
        case 116: 
        case 117: 
        case 118: 
          { 
	if(Debug.debugTokenizer)
		dump("GSP code content");//$NON-NLS-1$
	return doScan( "}", false, false, false, JSP_CONTENT, ST_GSP_CONTENT, ST_GSP_CONTENT);
 }
        case 687: break;
        case 110: 
        case 114: 
        case 115: 
        case 275: 
          { 
	if(Debug.debugTokenizer)
		dump("attr value");//$NON-NLS-1$
        yybegin(ST_JSP_DIRECTIVE_ATTRIBUTE_NAME);
        return XML_TAG_ATTRIBUTE_VALUE;
 }
        case 688: break;
        case 109: 
          { 
	if(Debug.debugTokenizer)
		dump("equals");//$NON-NLS-1$
        yybegin(ST_JSP_DIRECTIVE_ATTRIBUTE_VALUE);
        return XML_TAG_ATTRIBUTE_EQUALS;
 }
        case 689: break;
        case 108: 
          { 
	if(Debug.debugTokenizer)
		dump("attr name");//$NON-NLS-1$
        yybegin(ST_JSP_DIRECTIVE_EQUALS);
        return XML_TAG_ATTRIBUTE_NAME;
 }
        case 690: break;
        case 105: 
          { 
	if(Debug.debugTokenizer)
		dump("JSP directive name");//$NON-NLS-1$
	yybegin(ST_JSP_DIRECTIVE_NAME_WHITESPACE);
	return JSP_DIRECTIVE_NAME;
 }
        case 691: break;
        case 100: 
        case 101: 
        case 102: 
        case 103: 
          { 
	if(Debug.debugTokenizer)
		dump("JSP code content");//$NON-NLS-1$
	return doScan("%>", false, false, false, JSP_CONTENT, ST_JSP_CONTENT, ST_JSP_CONTENT);
 }
        case 692: break;
        case 95: 
        case 97: 
        case 98: 
        case 99: 
        case 262: 
        case 263: 
        case 264: 
        case 267: 
        case 268: 
        case 409: 
        case 412: 
          { 
	if(Debug.debugTokenizer)
		dump("DHTML processing instruction attribute value");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
        yybegin(ST_DHTML_ATTRIBUTE_NAME);
        return XML_TAG_ATTRIBUTE_VALUE;
 }
        case 693: break;
        case 94: 
          { 
	if(Debug.debugTokenizer)
		dump("DHTML processing instruction '='");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
        yybegin(ST_DHTML_ATTRIBUTE_VALUE);
        return XML_TAG_ATTRIBUTE_EQUALS;
 }
        case 694: break;
        case 93: 
          { 
	if(Debug.debugTokenizer)
		dump("DHTML processing instruction attribute name");//$NON-NLS-1$
        yybegin(ST_DHTML_EQUALS);
        return XML_TAG_ATTRIBUTE_NAME;
 }
        case 695: break;
        case 91: 
          { 
	if(Debug.debugTokenizer)
		dump("DHTML processing instruction end");//$NON-NLS-1$
	fEmbeddedHint = UNDEFINED;
        yybegin(YYINITIAL);
        return XML_PI_CLOSE;
 }
        case 696: break;
        case 84: 
        case 86: 
        case 89: 
        case 250: 
          { 
	if(Debug.debugTokenizer)
		dump("XML processing instruction attribute value");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
        yybegin(ST_XML_PI_ATTRIBUTE_NAME);
        return XML_TAG_ATTRIBUTE_VALUE;
 }
        case 697: break;
        case 52: 
        case 104: 
        case 121: 
        case 127: 
        case 136: 
          { 
	if(Debug.debugTokenizer)
		dump("\nstart tag open");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_NAME;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
        yybegin(ST_XML_TAG_NAME);
        return XML_TAG_OPEN;
 }
        case 698: break;
        case 44: 
        case 198: 
        case 199: 
        case 202: 
        case 203: 
        case 215: 
        case 216: 
        case 218: 
        case 221: 
        case 222: 
        case 223: 
        case 381: 
        case 385: 
        case 458: 
        case 472: 
        case 478: 
          { 
	return JSP_VBL_CONTENT;
 }
        case 699: break;
        case 36: 
        case 171: 
        case 172: 
        case 174: 
        case 349: 
        case 446: 
        case 450: 
        case 508: 
        case 532: 
        case 548: 
        case 561: 
        case 569: 
          { 
	if(Debug.debugTokenizer)
		dump("attlist contentspec");//$NON-NLS-1$
	return XML_ATTLIST_DECL_CONTENT;
 }
        case 700: break;
        case 34: 
        case 162: 
        case 163: 
        case 165: 
        case 335: 
        case 436: 
        case 440: 
        case 505: 
        case 531: 
        case 547: 
        case 560: 
        case 568: 
          { 
	if(Debug.debugTokenizer)
		dump("elementdecl contentspec");//$NON-NLS-1$
	return XML_ELEMENT_DECL_CONTENT;
 }
        case 701: break;
        case 23: 
        case 120: 
          { 
	if(Debug.debugTokenizer)
		dump("inappropriate tag name");//$NON-NLS-1$
	if(!fStateStack.empty() && (fStateStack.peek()==ST_XML_ATTRIBUTE_VALUE_SQUOTED||fStateStack.peek()==ST_XML_ATTRIBUTE_VALUE_DQUOTED)) {
		yybegin(ST_ABORT_EMBEDDED);
		yypushback(yylength()-1);
		return XML_TAG_ATTRIBUTE_VALUE;
	}
	yybegin(YYINITIAL);
        return XML_CONTENT;
 }
        case 702: break;
        case 18: 
        case 107: 
          { 
	if(Debug.debugTokenizer)
		dump("white space");//$NON-NLS-1$
	yybegin(ST_JSP_DIRECTIVE_ATTRIBUTE_NAME);
	return WHITE_SPACE;
 }
        case 703: break;
        case 5: 
        case 8: 
        case 9: 
        case 10: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 17: 
        case 19: 
        case 20: 
        case 21: 
        case 24: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 35: 
        case 41: 
        case 42: 
        case 43: 
        case 71: 
        case 190: 
        case 195: 
          { 
	if(Debug.debugTokenizer)
		dump("white space");//$NON-NLS-1$
        return WHITE_SPACE;
 }
        case 704: break;
        case 0: 
        case 51: 
        case 54: 
        case 55: 
        case 57: 
        case 230: 
        case 232: 
        case 233: 
        case 236: 
        case 238: 
        case 392: 
        case 393: 
        case 394: 
        case 487: 
          { 
	if(Debug.debugTokenizer)
		dump("\nXML content");//$NON-NLS-1$
	return XML_CONTENT;
 }
        case 705: break;
        case 53: 
        case 56: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 69: 
        case 70: 
        case 81: 
        case 85: 
        case 87: 
        case 88: 
        case 90: 
        case 92: 
        case 96: 
        case 106: 
        case 111: 
        case 112: 
        case 113: 
        case 123: 
        case 132: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 143: 
        case 144: 
        case 146: 
        case 147: 
        case 148: 
        case 152: 
        case 153: 
        case 154: 
        case 158: 
        case 159: 
        case 160: 
        case 167: 
        case 168: 
        case 169: 
        case 181: 
        case 183: 
        case 184: 
        case 205: 
        case 206: 
        case 208: 
        case 210: 
        case 211: 
        case 213: 
        case 219: 
        case 224: 
          { 
	if (Debug.debugTokenizer)
		System.out.println("!!!unexpected!!!: \"" + yytext() + "\":" + //$NON-NLS-2$//$NON-NLS-1$
			yychar + "-" + (yychar + yylength()));//$NON-NLS-1$
	return UNDEFINED;
 }
        case 706: break;
        case 58: 
        case 59: 
        case 60: 
          { 
	if(Debug.debugTokenizer)
		dump("CDATA text");//$NON-NLS-1$
	fEmbeddedPostState = ST_CDATA_TEXT;
	fEmbeddedHint = XML_CDATA_TEXT;
	String returnedContext = doScan("]]>", false, true, true, XML_CDATA_TEXT, ST_CDATA_END,  ST_CDATA_END);//$NON-NLS-1$
	if(returnedContext == XML_CDATA_TEXT)
		yybegin(ST_CDATA_END);
	return returnedContext;
 }
        case 707: break;
        case 65: 
        case 209: 
        case 214: 
          { 
	if(Debug.debugTokenizer)
		dump("LINE FEED");//$NON-NLS-1$
	return WHITE_SPACE;
 }
        case 708: break;
        case 66: 
        case 67: 
        case 68: 
          { 
	if(Debug.debugTokenizer)
		dump("comment content");//$NON-NLS-1$
	return scanXMLCommentText();
 }
        case 709: break;
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 243: 
        case 244: 
        case 245: 
        case 404: 
        case 490: 
        case 491: 
        case 522: 
        case 523: 
        case 538: 
        case 554: 
        case 565: 
        case 573: 
        case 579: 
        case 581: 
        case 583: 
        case 585: 
          { 
	if(Debug.debugTokenizer)
		dump("processing instruction target");//$NON-NLS-1$
	fEmbeddedHint = XML_CONTENT;
        yybegin(ST_PI_WS);
        return XML_TAG_NAME;
 }
        case 710: break;
        case 76: 
          { 
        yybegin(ST_PI_CONTENT);
        return WHITE_SPACE;
 }
        case 711: break;
        case 77: 
        case 78: 
        case 79: 
        case 80: 
          { 
		// block scan until close is found
	return doScan("?>", false, false, false, XML_PI_CONTENT, ST_XML_PI_TAG_CLOSE, ST_XML_PI_TAG_CLOSE);
 }
        case 712: break;
        case 82: 
          { 
	if(Debug.debugTokenizer)
		dump("XML processing instruction attribute name");//$NON-NLS-1$
        yybegin(ST_XML_PI_EQUALS);
        return XML_TAG_ATTRIBUTE_NAME;
 }
        case 713: break;
        case 83: 
          { 
	if(Debug.debugTokenizer)
		dump("XML processing instruction '='");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
        yybegin(ST_XML_PI_ATTRIBUTE_VALUE);
        return XML_TAG_ATTRIBUTE_EQUALS;
 }
        case 714: break;
        case 133: 
        case 185: 
          { 
	String type = yy_lexical_state == ST_XML_ATTRIBUTE_VALUE ? XML_TAG_ATTRIBUTE_VALUE_DQUOTE : JSP_TAG_ATTRIBUTE_VALUE_DQUOTE;

	if (Debug.debugTokenizer) {
		System.out.println("begin embedded region: " + fEmbeddedHint+", "+type);//$NON-NLS-1$
	}
	fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_VALUE_DQUOTED;
	yybegin(ST_XML_ATTRIBUTE_VALUE_DQUOTED);
	fStateStack.push(yystate());
	if(Debug.debugTokenizer)
		dump("JSP attribute value start - complex double quoted");//$NON-NLS-1$
	assembleEmbeddedContainer(type, type);
	fStateStack.pop();
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
	yybegin(ST_XML_ATTRIBUTE_NAME);
	return PROXY_CONTEXT;
 }
        case 715: break;
        case 134: 
        case 186: 
          { 
	String type = yy_lexical_state == ST_XML_ATTRIBUTE_VALUE ? XML_TAG_ATTRIBUTE_VALUE_SQUOTE : JSP_TAG_ATTRIBUTE_VALUE_SQUOTE;
	if (Debug.debugTokenizer) {
		System.out.println("begin embedded region: " + fEmbeddedHint+", "+type);//$NON-NLS-1$
	}
	fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_VALUE_SQUOTED;
	yybegin(ST_XML_ATTRIBUTE_VALUE_SQUOTED);
	fStateStack.push(yystate());
	if(Debug.debugTokenizer)
		dump("JSP attribute value start - complex single quoted");//$NON-NLS-1$
	assembleEmbeddedContainer(type, type);
	fStateStack.pop();
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_EQUALS;
        yybegin(ST_XML_ATTRIBUTE_NAME);
	return PROXY_CONTEXT;
 }
        case 716: break;
        case 137: 
          { 
	if(Debug.debugTokenizer)
		dump("declaration end");//$NON-NLS-1$
	if (Debug.debugTokenizer) {
		if(fStateStack.peek()!=YYINITIAL)
			System.out.println("end embedded region");//$NON-NLS-1$
	}
	yybegin(fStateStack.pop());
	return XML_DECLARATION_CLOSE;
 }
        case 717: break;
        case 142: 
          { 
	if(Debug.debugTokenizer)
		dump("doctype type");//$NON-NLS-1$
	yybegin(ST_XML_DOCTYPE_EXTERNAL_ID);
	return XML_DOCTYPE_NAME;
 }
        case 718: break;
        case 145: 
        case 149: 
        case 150: 
        case 305: 
        case 310: 
        case 428: 
          { 
	if(Debug.debugTokenizer)
		dump("doctype public reference");//$NON-NLS-1$
	fEmbeddedHint = UNDEFINED;
	fEmbeddedPostState = YYINITIAL;
	yybegin(ST_XML_DOCTYPE_ID_SYSTEM);
	return XML_DOCTYPE_EXTERNAL_ID_PUBREF;
 }
        case 719: break;
        case 151: 
        case 155: 
        case 156: 
        case 318: 
          { 
	if(Debug.debugTokenizer)
		dump("doctype system reference");//$NON-NLS-1$
	fEmbeddedHint = UNDEFINED;
	fEmbeddedPostState = YYINITIAL;
	yybegin(ST_XML_DECLARATION_CLOSE);
	return XML_DOCTYPE_EXTERNAL_ID_SYSREF;
 }
        case 720: break;
        case 157: 
        case 161: 
        case 325: 
        case 330: 
        case 433: 
          { 
	if(Debug.debugTokenizer)
		dump("elementdecl name");//$NON-NLS-1$
	fEmbeddedHint = UNDEFINED;
	fEmbeddedPostState = YYINITIAL;
	yybegin(ST_XML_ELEMENT_DECLARATION_CONTENT);
	return XML_ELEMENT_DECL_NAME;
 }
        case 721: break;
        case 164: 
          { 
	if(Debug.debugTokenizer)
		dump("elementdecl close");//$NON-NLS-1$
	if (Debug.debugTokenizer) {
		if(fStateStack.peek()!=YYINITIAL)
			System.out.println("end embedded region");//$NON-NLS-1$
	}
	yybegin(fStateStack.pop());
	return XML_DECLARATION_CLOSE;
 }
        case 722: break;
        case 166: 
        case 170: 
        case 339: 
        case 344: 
        case 443: 
          { 
	if(Debug.debugTokenizer)
		dump("attlist name");//$NON-NLS-1$
	fEmbeddedHint = UNDEFINED;
	fEmbeddedPostState = YYINITIAL;
	yybegin(ST_XML_ATTLIST_DECLARATION_CONTENT);
	return XML_ATTLIST_DECL_NAME;
 }
        case 723: break;
        case 173: 
          { 
	if(Debug.debugTokenizer)
		dump("attlist close");//$NON-NLS-1$
	if (Debug.debugTokenizer) {
		if(fStateStack.peek()!=YYINITIAL)
			System.out.println("end embedded region");//$NON-NLS-1$
	}
	yybegin(fStateStack.pop());
	return XML_DECLARATION_CLOSE;
 }
        case 724: break;
        case 178: 
        case 179: 
        case 180: 
          { 
	if(Debug.debugTokenizer)
		dump("\nJSP comment text");//$NON-NLS-1$
	return scanJSPCommentText();
 }
        case 725: break;
        case 188: 
        case 192: 
        case 193: 
        case 194: 
        case 197: 
        case 362: 
          { 
	return XML_TAG_ATTRIBUTE_VALUE;
 }
        case 726: break;
        case 189: 
          { 
	if (Debug.debugTokenizer) {
		System.out.println("begin embedded region: " + fEmbeddedHint+", genericTagOpen");//$NON-NLS-1$
	}
	int incomingState = yystate();
	fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
	if(Debug.debugTokenizer)
		dump("tag inside of JSP attribute value start");//$NON-NLS-1$
	yybegin(ST_XML_TAG_NAME);
	assembleEmbeddedContainer(XML_TAG_OPEN, new String[]{XML_TAG_CLOSE,XML_EMPTY_TAG_CLOSE});
	if(yystate() != ST_ABORT_EMBEDDED)
        yybegin(incomingState);
	return PROXY_CONTEXT;
 }
        case 727: break;
        case 191: 
          { 
	return isJspTag() ? JSP_TAG_ATTRIBUTE_VALUE_SQUOTE : XML_TAG_ATTRIBUTE_VALUE_SQUOTE;
 }
        case 728: break;
        case 196: 
          { 
	return isJspTag()? JSP_TAG_ATTRIBUTE_VALUE_DQUOTE : XML_TAG_ATTRIBUTE_VALUE_DQUOTE;
 }
        case 729: break;
        case 200: 
          { 
	yybegin(ST_JSP_VBL_DQUOTES);
	return JSP_VBL_DQUOTE;
 }
        case 730: break;
        case 201: 
          { 
	yybegin(ST_JSP_VBL_SQUOTES);
	return JSP_VBL_SQUOTE;
 }
        case 731: break;
        case 204: 
          { 
	fELlevel--;
	if(fELlevel == 0) {
		yybegin(YYINITIAL);
		return JSP_VBL_CLOSE;
	}
	return JSP_VBL_CONTENT;
 }
        case 732: break;
        case 207: 
          { 
	yybegin(ST_JSP_VBL);
	return JSP_VBL_SQUOTE;
 }
        case 733: break;
        case 212: 
          { 
	yybegin(ST_JSP_VBL);
	return JSP_VBL_DQUOTE;
 }
        case 734: break;
        case 217: 
          { 
	return isJspTag() ? JSP_TAG_ATTRIBUTE_VALUE_DQUOTE: XML_TAG_ATTRIBUTE_VALUE_DQUOTE;
 }
        case 735: break;
        case 220: 
          { 
	return JSP_VBL_CLOSE;
 }
        case 736: break;
        case 225: 
          { 
	if(Debug.debugTokenizer)
		dump("\nend tag open");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_NAME;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
        yybegin(ST_XML_TAG_NAME);
        return XML_END_TAG_OPEN;
 }
        case 737: break;
        case 226: 
          { 
	if(Debug.debugTokenizer)
		dump("\nprocessing instruction start");//$NON-NLS-1$
	yybegin(ST_PI);
        return XML_PI_OPEN;
 }
        case 738: break;
        case 227: 
        case 334: 
        case 348: 
        case 365: 
        case 370: 
        case 375: 
        case 379: 
        case 383: 
          { 
	/* JSP scriptlet begun (anywhere)
	 * A consequence of the start anywhere possibility is that the
	 *  incoming state must be checked to see if it's erroneous
	 *  due to the order of precedence generated
	 */
	// begin sanity checks
	if(yystate() == ST_JSP_CONTENT) {
		// at the beginning?!
		yypushback(1);
		return JSP_CONTENT;
	}
	else if(yystate() == ST_BLOCK_TAG_SCAN) {
		yypushback(2);
		return doBlockTagScan();
	}
	else if(yystate() == ST_XML_COMMENT) {
		yypushback(2);
		return scanXMLCommentText();
	}
	else if(yystate() == ST_JSP_COMMENT) {
		yypushback(2);
		return scanJSPCommentText();
	}
	// finished sanity checks
	fStateStack.push(yystate());
	if(fStateStack.peek()==YYINITIAL) {
		// the simple case, just a regular scriptlet out in content
		if(Debug.debugTokenizer)
			dump("\nJSP scriptlet start");//$NON-NLS-1$
		yybegin(ST_JSP_CONTENT);
		return JSP_SCRIPTLET_OPEN;
	}
	else {
		if (Debug.debugTokenizer) {
			System.out.println("begin embedded region: " + fEmbeddedHint+", jspScriptletStart");//$NON-NLS-1$
		}
		if(Debug.debugTokenizer)
			dump("JSP scriptlet start");//$NON-NLS-1$
		if(yystate() == ST_XML_ATTRIBUTE_VALUE_DQUOTED)
			fEmbeddedPostState = ST_XML_ATTRIBUTE_VALUE_DQUOTED;
		else if(yystate() == ST_XML_ATTRIBUTE_VALUE_SQUOTED)
			fEmbeddedPostState = ST_XML_ATTRIBUTE_VALUE_SQUOTED;
		else if(yystate() == ST_CDATA_TEXT) {
			fEmbeddedPostState = ST_CDATA_TEXT;
			fEmbeddedHint = XML_CDATA_TEXT;
		}
		yybegin(ST_JSP_CONTENT);
		assembleEmbeddedContainer(JSP_SCRIPTLET_OPEN, JSP_CLOSE);
		if(yystate() == ST_BLOCK_TAG_INTERNAL_SCAN) {
			yybegin(ST_BLOCK_TAG_SCAN);
			return BLOCK_TEXT;
		}
		// required help for successive embedded regions
		if(yystate() == ST_XML_TAG_NAME) {
			fEmbeddedHint = XML_TAG_NAME;
			fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
		}
		else if((yystate() == ST_XML_ATTRIBUTE_NAME || yystate() == ST_XML_EQUALS)) {
			fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
			fEmbeddedPostState = ST_XML_EQUALS;
		}
		else if(yystate() == ST_XML_ATTRIBUTE_VALUE) {
			fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
			fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
		}
        else if(yystate() == ST_JSP_ATTRIBUTE_VALUE) {
            fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
            fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
        }
		
		return PROXY_CONTEXT;
	}
 }
        case 739: break;
        case 228: 
          { 
	fStateStack.push(yystate());
	if(Debug.debugTokenizer)
		dump("\ndeclaration start");//$NON-NLS-1$
        yybegin(ST_XML_DECLARATION);
	return XML_DECLARATION_OPEN;
 }
        case 740: break;
        case 234: 
        case 256: 
        case 269: 
        case 281: 
        case 313: 
        case 320: 
        case 333: 
        case 336: 
        case 347: 
        case 350: 
        case 366: 
        case 372: 
        case 377: 
        case 380: 
        case 384: 
          { 
	/* GSP scriptlet begun (anywhere)
	 * A consequence of the start anywhere possibility is that the
	 *  incoming state must be checked to see if it's erroneous
	 *  due to the order of precedence generated
	 */
	// begin sanity checks
	if(yystate() == ST_GSP_CONTENT) {
		// at the beginning?!
		yypushback(1);
		return JSP_CONTENT;
	}
	else if(yystate() == ST_BLOCK_TAG_SCAN) {
		yypushback(2);
		return doBlockTagScan();
	}
	else if(yystate() == ST_XML_COMMENT) {
		yypushback(2);
		return scanXMLCommentText();
	}
	else if(yystate() == ST_JSP_COMMENT) {
		yypushback(2);
		return scanJSPCommentText();
	}
	// finished sanity checks
	fStateStack.push(yystate());
	if(fStateStack.peek()==YYINITIAL) {
		// the simple case, just a regular scriptlet out in content
		if(Debug.debugTokenizer)
			dump("\nJSP scriptlet start");//$NON-NLS-1$
		yybegin(ST_GSP_CONTENT);
		return JSP_SCRIPTLET_OPEN;
	}
	else {
		if (Debug.debugTokenizer) {
			System.out.println("begin embedded region: " + fEmbeddedHint+", gspScriptletStart");//$NON-NLS-1$
		}
		if(Debug.debugTokenizer)
			dump("GSP scriptlet start");//$NON-NLS-1$
		if(yystate() == ST_XML_ATTRIBUTE_VALUE_DQUOTED)
			fEmbeddedPostState = ST_XML_ATTRIBUTE_VALUE_DQUOTED;
		else if(yystate() == ST_XML_ATTRIBUTE_VALUE_SQUOTED)
			fEmbeddedPostState = ST_XML_ATTRIBUTE_VALUE_SQUOTED;
		else if(yystate() == ST_CDATA_TEXT) {
			fEmbeddedPostState = ST_CDATA_TEXT;
			fEmbeddedHint = XML_CDATA_TEXT;
		}
		yybegin(ST_GSP_CONTENT);
		assembleEmbeddedContainer(JSP_SCRIPTLET_OPEN, JSP_CLOSE);
		if(yystate() == ST_BLOCK_TAG_INTERNAL_SCAN) {
			yybegin(ST_BLOCK_TAG_SCAN);
			return BLOCK_TEXT;
		}
		// required help for successive embedded regions
		if(yystate() == ST_XML_TAG_NAME) {
			fEmbeddedHint = XML_TAG_NAME;
			fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
		}
		else if((yystate() == ST_XML_ATTRIBUTE_NAME || yystate() == ST_XML_EQUALS)) {
			fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
			fEmbeddedPostState = ST_XML_EQUALS;
		}
		else if(yystate() == ST_XML_ATTRIBUTE_VALUE) {
			fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
			fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
		}
        else if(yystate() == ST_JSP_ATTRIBUTE_VALUE) {
            fEmbeddedHint = XML_TAG_ATTRIBUTE_VALUE;
            fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
        }
		
		return PROXY_CONTEXT;
	}
 }
        case 741: break;
        case 242: 
          { 
	if(Debug.debugTokenizer)
		dump("processing instruction end");//$NON-NLS-1$
	fEmbeddedHint = UNDEFINED;
        yybegin(YYINITIAL);
        return XML_PI_CLOSE;
 }
        case 742: break;
        case 246: 
          { 
		// ended with nothing inside
		fEmbeddedHint = UNDEFINED;
        yybegin(YYINITIAL);
        return XML_PI_CLOSE;
 }
        case 743: break;
        case 247: 
          { 
	if(Debug.debugTokenizer)
		dump("XML processing instruction end");//$NON-NLS-1$
	fEmbeddedHint = UNDEFINED;
        yybegin(YYINITIAL);
        return XML_PI_CLOSE;
 }
        case 744: break;
        case 270: 
          { 
	if(Debug.debugTokenizer)
		dump("JSP end");//$NON-NLS-1$
	if (Debug.debugTokenizer) {
		if(fStateStack.peek()!=YYINITIAL)
			System.out.println("end embedded region");//$NON-NLS-1$
	}
	yybegin(fStateStack.pop());
	return JSP_CLOSE;
 }
        case 745: break;
        case 272: 
          { 
	if(Debug.debugTokenizer)
		dump("JSP end");//$NON-NLS-1$
	if (Debug.debugTokenizer) {
		if(fStateStack.peek()!=YYINITIAL)
			System.out.println("end embedded region");//$NON-NLS-1$
	}
	yybegin(fStateStack.pop());
	return JSP_DIRECTIVE_CLOSE;
 }
        case 746: break;
        case 282: 
          { 
        yybegin(YYINITIAL);
	fEmbeddedHint = UNDEFINED;
	if(Debug.debugTokenizer)
		dump("empty tag close");//$NON-NLS-1$

	if (fEmbeddedContainer != null)
		fInTagEmbedded = false;
	else
		fInTagContainer = false;

	return XML_EMPTY_TAG_CLOSE;
 }
        case 747: break;
        case 285: 
          { 
	String tagName = yytext().substring(1);
	// pushback to just after the opening bracket
	yypushback(yylength() - 1);
	/*
	 * If this tag can not be nested or we're already searching for an
	 * attribute name, equals, or value, return immediately.
	 */
	if (!isNestable(tagName) || (!fStateStack.empty() && (fStateStack.peek() == ST_XML_ATTRIBUTE_NAME || fStateStack.peek() == ST_XML_EQUALS || fStateStack.peek() == ST_XML_ATTRIBUTE_VALUE || fStateStack.peek() == ST_JSP_ATTRIBUTE_VALUE))) {
		yybegin(ST_XML_TAG_NAME);
		return XML_TAG_OPEN;
	}
	if(Debug.debugTokenizer)
		dump("tag in place of attr name");//$NON-NLS-1$
	fEmbeddedHint = XML_TAG_ATTRIBUTE_NAME;
	fEmbeddedPostState = ST_XML_ATTRIBUTE_NAME;
	fStateStack.push(yystate());
	// embedded container should be looking for the name (again) next
	yybegin(ST_XML_TAG_NAME);
	assembleEmbeddedTagSequence(XML_TAG_OPEN, tagName); // ?
	fStateStack.pop();
	yybegin(ST_XML_EQUALS);
	return PROXY_CONTEXT;
 }
        case 748: break;
        case 175: 
        case 176: 
        case 177: 
          { 
		return doBlockTagScan();
	 }
        case 749: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              return null;
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }    


}
